
nucleo-f446re-servor-motor-hc-sr04-tmp102-control-using-qt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000517c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  0800534c  0800534c  0001534c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053bc  080053bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080053bc  080053bc  000153bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053c4  080053c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053c4  080053c4  000153c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053c8  080053c8  000153c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080053cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  20000070  0800543c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  0800543c  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea16  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e45  00000000  00000000  0002eab6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ea0  00000000  00000000  00030900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000dc8  00000000  00000000  000317a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022437  00000000  00000000  00032568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad6c  00000000  00000000  0005499f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1b6b  00000000  00000000  0005f70b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00131276  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042fc  00000000  00000000  001312f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005334 	.word	0x08005334

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	08005334 	.word	0x08005334

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 b972 	b.w	8000d98 <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9e08      	ldr	r6, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	4688      	mov	r8, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14b      	bne.n	8000b72 <__udivmoddi4+0xa6>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4615      	mov	r5, r2
 8000ade:	d967      	bls.n	8000bb0 <__udivmoddi4+0xe4>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b14a      	cbz	r2, 8000afa <__udivmoddi4+0x2e>
 8000ae6:	f1c2 0720 	rsb	r7, r2, #32
 8000aea:	fa01 f302 	lsl.w	r3, r1, r2
 8000aee:	fa20 f707 	lsr.w	r7, r0, r7
 8000af2:	4095      	lsls	r5, r2
 8000af4:	ea47 0803 	orr.w	r8, r7, r3
 8000af8:	4094      	lsls	r4, r2
 8000afa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000afe:	0c23      	lsrs	r3, r4, #16
 8000b00:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b04:	fa1f fc85 	uxth.w	ip, r5
 8000b08:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b0c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b10:	fb07 f10c 	mul.w	r1, r7, ip
 8000b14:	4299      	cmp	r1, r3
 8000b16:	d909      	bls.n	8000b2c <__udivmoddi4+0x60>
 8000b18:	18eb      	adds	r3, r5, r3
 8000b1a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000b1e:	f080 811b 	bcs.w	8000d58 <__udivmoddi4+0x28c>
 8000b22:	4299      	cmp	r1, r3
 8000b24:	f240 8118 	bls.w	8000d58 <__udivmoddi4+0x28c>
 8000b28:	3f02      	subs	r7, #2
 8000b2a:	442b      	add	r3, r5
 8000b2c:	1a5b      	subs	r3, r3, r1
 8000b2e:	b2a4      	uxth	r4, r4
 8000b30:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b34:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b3c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b40:	45a4      	cmp	ip, r4
 8000b42:	d909      	bls.n	8000b58 <__udivmoddi4+0x8c>
 8000b44:	192c      	adds	r4, r5, r4
 8000b46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b4a:	f080 8107 	bcs.w	8000d5c <__udivmoddi4+0x290>
 8000b4e:	45a4      	cmp	ip, r4
 8000b50:	f240 8104 	bls.w	8000d5c <__udivmoddi4+0x290>
 8000b54:	3802      	subs	r0, #2
 8000b56:	442c      	add	r4, r5
 8000b58:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b5c:	eba4 040c 	sub.w	r4, r4, ip
 8000b60:	2700      	movs	r7, #0
 8000b62:	b11e      	cbz	r6, 8000b6c <__udivmoddi4+0xa0>
 8000b64:	40d4      	lsrs	r4, r2
 8000b66:	2300      	movs	r3, #0
 8000b68:	e9c6 4300 	strd	r4, r3, [r6]
 8000b6c:	4639      	mov	r1, r7
 8000b6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b72:	428b      	cmp	r3, r1
 8000b74:	d909      	bls.n	8000b8a <__udivmoddi4+0xbe>
 8000b76:	2e00      	cmp	r6, #0
 8000b78:	f000 80eb 	beq.w	8000d52 <__udivmoddi4+0x286>
 8000b7c:	2700      	movs	r7, #0
 8000b7e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b82:	4638      	mov	r0, r7
 8000b84:	4639      	mov	r1, r7
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	fab3 f783 	clz	r7, r3
 8000b8e:	2f00      	cmp	r7, #0
 8000b90:	d147      	bne.n	8000c22 <__udivmoddi4+0x156>
 8000b92:	428b      	cmp	r3, r1
 8000b94:	d302      	bcc.n	8000b9c <__udivmoddi4+0xd0>
 8000b96:	4282      	cmp	r2, r0
 8000b98:	f200 80fa 	bhi.w	8000d90 <__udivmoddi4+0x2c4>
 8000b9c:	1a84      	subs	r4, r0, r2
 8000b9e:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba2:	2001      	movs	r0, #1
 8000ba4:	4698      	mov	r8, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d0e0      	beq.n	8000b6c <__udivmoddi4+0xa0>
 8000baa:	e9c6 4800 	strd	r4, r8, [r6]
 8000bae:	e7dd      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000bb0:	b902      	cbnz	r2, 8000bb4 <__udivmoddi4+0xe8>
 8000bb2:	deff      	udf	#255	; 0xff
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	2a00      	cmp	r2, #0
 8000bba:	f040 808f 	bne.w	8000cdc <__udivmoddi4+0x210>
 8000bbe:	1b49      	subs	r1, r1, r5
 8000bc0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000bc4:	fa1f f885 	uxth.w	r8, r5
 8000bc8:	2701      	movs	r7, #1
 8000bca:	fbb1 fcfe 	udiv	ip, r1, lr
 8000bce:	0c23      	lsrs	r3, r4, #16
 8000bd0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000bd4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd8:	fb08 f10c 	mul.w	r1, r8, ip
 8000bdc:	4299      	cmp	r1, r3
 8000bde:	d907      	bls.n	8000bf0 <__udivmoddi4+0x124>
 8000be0:	18eb      	adds	r3, r5, r3
 8000be2:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x122>
 8000be8:	4299      	cmp	r1, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2bc>
 8000bee:	4684      	mov	ip, r0
 8000bf0:	1a59      	subs	r1, r3, r1
 8000bf2:	b2a3      	uxth	r3, r4
 8000bf4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bfc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c00:	fb08 f800 	mul.w	r8, r8, r0
 8000c04:	45a0      	cmp	r8, r4
 8000c06:	d907      	bls.n	8000c18 <__udivmoddi4+0x14c>
 8000c08:	192c      	adds	r4, r5, r4
 8000c0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x14a>
 8000c10:	45a0      	cmp	r8, r4
 8000c12:	f200 80b6 	bhi.w	8000d82 <__udivmoddi4+0x2b6>
 8000c16:	4618      	mov	r0, r3
 8000c18:	eba4 0408 	sub.w	r4, r4, r8
 8000c1c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c20:	e79f      	b.n	8000b62 <__udivmoddi4+0x96>
 8000c22:	f1c7 0c20 	rsb	ip, r7, #32
 8000c26:	40bb      	lsls	r3, r7
 8000c28:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c2c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c30:	fa01 f407 	lsl.w	r4, r1, r7
 8000c34:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c38:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c3c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c40:	4325      	orrs	r5, r4
 8000c42:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c46:	0c2c      	lsrs	r4, r5, #16
 8000c48:	fb08 3319 	mls	r3, r8, r9, r3
 8000c4c:	fa1f fa8e 	uxth.w	sl, lr
 8000c50:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c54:	fb09 f40a 	mul.w	r4, r9, sl
 8000c58:	429c      	cmp	r4, r3
 8000c5a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c5e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b0>
 8000c64:	eb1e 0303 	adds.w	r3, lr, r3
 8000c68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000c6c:	f080 8087 	bcs.w	8000d7e <__udivmoddi4+0x2b2>
 8000c70:	429c      	cmp	r4, r3
 8000c72:	f240 8084 	bls.w	8000d7e <__udivmoddi4+0x2b2>
 8000c76:	f1a9 0902 	sub.w	r9, r9, #2
 8000c7a:	4473      	add	r3, lr
 8000c7c:	1b1b      	subs	r3, r3, r4
 8000c7e:	b2ad      	uxth	r5, r5
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c8c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c90:	45a2      	cmp	sl, r4
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1da>
 8000c94:	eb1e 0404 	adds.w	r4, lr, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	d26b      	bcs.n	8000d76 <__udivmoddi4+0x2aa>
 8000c9e:	45a2      	cmp	sl, r4
 8000ca0:	d969      	bls.n	8000d76 <__udivmoddi4+0x2aa>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4474      	add	r4, lr
 8000ca6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000caa:	fba0 8902 	umull	r8, r9, r0, r2
 8000cae:	eba4 040a 	sub.w	r4, r4, sl
 8000cb2:	454c      	cmp	r4, r9
 8000cb4:	46c2      	mov	sl, r8
 8000cb6:	464b      	mov	r3, r9
 8000cb8:	d354      	bcc.n	8000d64 <__udivmoddi4+0x298>
 8000cba:	d051      	beq.n	8000d60 <__udivmoddi4+0x294>
 8000cbc:	2e00      	cmp	r6, #0
 8000cbe:	d069      	beq.n	8000d94 <__udivmoddi4+0x2c8>
 8000cc0:	ebb1 050a 	subs.w	r5, r1, sl
 8000cc4:	eb64 0403 	sbc.w	r4, r4, r3
 8000cc8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ccc:	40fd      	lsrs	r5, r7
 8000cce:	40fc      	lsrs	r4, r7
 8000cd0:	ea4c 0505 	orr.w	r5, ip, r5
 8000cd4:	e9c6 5400 	strd	r5, r4, [r6]
 8000cd8:	2700      	movs	r7, #0
 8000cda:	e747      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000cdc:	f1c2 0320 	rsb	r3, r2, #32
 8000ce0:	fa20 f703 	lsr.w	r7, r0, r3
 8000ce4:	4095      	lsls	r5, r2
 8000ce6:	fa01 f002 	lsl.w	r0, r1, r2
 8000cea:	fa21 f303 	lsr.w	r3, r1, r3
 8000cee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf2:	4338      	orrs	r0, r7
 8000cf4:	0c01      	lsrs	r1, r0, #16
 8000cf6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cfa:	fa1f f885 	uxth.w	r8, r5
 8000cfe:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d02:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d06:	fb07 f308 	mul.w	r3, r7, r8
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d907      	bls.n	8000d22 <__udivmoddi4+0x256>
 8000d12:	1869      	adds	r1, r5, r1
 8000d14:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000d18:	d22f      	bcs.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1a:	428b      	cmp	r3, r1
 8000d1c:	d92d      	bls.n	8000d7a <__udivmoddi4+0x2ae>
 8000d1e:	3f02      	subs	r7, #2
 8000d20:	4429      	add	r1, r5
 8000d22:	1acb      	subs	r3, r1, r3
 8000d24:	b281      	uxth	r1, r0
 8000d26:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d2a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d32:	fb00 f308 	mul.w	r3, r0, r8
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d907      	bls.n	8000d4a <__udivmoddi4+0x27e>
 8000d3a:	1869      	adds	r1, r5, r1
 8000d3c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000d40:	d217      	bcs.n	8000d72 <__udivmoddi4+0x2a6>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d915      	bls.n	8000d72 <__udivmoddi4+0x2a6>
 8000d46:	3802      	subs	r0, #2
 8000d48:	4429      	add	r1, r5
 8000d4a:	1ac9      	subs	r1, r1, r3
 8000d4c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d50:	e73b      	b.n	8000bca <__udivmoddi4+0xfe>
 8000d52:	4637      	mov	r7, r6
 8000d54:	4630      	mov	r0, r6
 8000d56:	e709      	b.n	8000b6c <__udivmoddi4+0xa0>
 8000d58:	4607      	mov	r7, r0
 8000d5a:	e6e7      	b.n	8000b2c <__udivmoddi4+0x60>
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	e6fb      	b.n	8000b58 <__udivmoddi4+0x8c>
 8000d60:	4541      	cmp	r1, r8
 8000d62:	d2ab      	bcs.n	8000cbc <__udivmoddi4+0x1f0>
 8000d64:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d68:	eb69 020e 	sbc.w	r2, r9, lr
 8000d6c:	3801      	subs	r0, #1
 8000d6e:	4613      	mov	r3, r2
 8000d70:	e7a4      	b.n	8000cbc <__udivmoddi4+0x1f0>
 8000d72:	4660      	mov	r0, ip
 8000d74:	e7e9      	b.n	8000d4a <__udivmoddi4+0x27e>
 8000d76:	4618      	mov	r0, r3
 8000d78:	e795      	b.n	8000ca6 <__udivmoddi4+0x1da>
 8000d7a:	4667      	mov	r7, ip
 8000d7c:	e7d1      	b.n	8000d22 <__udivmoddi4+0x256>
 8000d7e:	4681      	mov	r9, r0
 8000d80:	e77c      	b.n	8000c7c <__udivmoddi4+0x1b0>
 8000d82:	3802      	subs	r0, #2
 8000d84:	442c      	add	r4, r5
 8000d86:	e747      	b.n	8000c18 <__udivmoddi4+0x14c>
 8000d88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d8c:	442b      	add	r3, r5
 8000d8e:	e72f      	b.n	8000bf0 <__udivmoddi4+0x124>
 8000d90:	4638      	mov	r0, r7
 8000d92:	e708      	b.n	8000ba6 <__udivmoddi4+0xda>
 8000d94:	4637      	mov	r7, r6
 8000d96:	e6e9      	b.n	8000b6c <__udivmoddi4+0xa0>

08000d98 <__aeabi_idiv0>:
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop

08000d9c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af02      	add	r7, sp, #8
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000da6:	79fb      	ldrb	r3, [r7, #7]
 8000da8:	f023 030f 	bic.w	r3, r3, #15
 8000dac:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	011b      	lsls	r3, r3, #4
 8000db2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	f043 030c 	orr.w	r3, r3, #12
 8000dba:	b2db      	uxtb	r3, r3
 8000dbc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000dc8:	7bbb      	ldrb	r3, [r7, #14]
 8000dca:	f043 030c 	orr.w	r3, r3, #12
 8000dce:	b2db      	uxtb	r3, r3
 8000dd0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000dd2:	7bbb      	ldrb	r3, [r7, #14]
 8000dd4:	f043 0308 	orr.w	r3, r3, #8
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ddc:	f107 0208 	add.w	r2, r7, #8
 8000de0:	2364      	movs	r3, #100	; 0x64
 8000de2:	9300      	str	r3, [sp, #0]
 8000de4:	2304      	movs	r3, #4
 8000de6:	214e      	movs	r1, #78	; 0x4e
 8000de8:	4803      	ldr	r0, [pc, #12]	; (8000df8 <lcd_send_cmd+0x5c>)
 8000dea:	f001 fa5b 	bl	80022a4 <HAL_I2C_Master_Transmit>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200000a0 	.word	0x200000a0

08000dfc <lcd_send_data>:

void lcd_send_data (char data)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af02      	add	r7, sp, #8
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	f023 030f 	bic.w	r3, r3, #15
 8000e0c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e0e:	79fb      	ldrb	r3, [r7, #7]
 8000e10:	011b      	lsls	r3, r3, #4
 8000e12:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f043 030d 	orr.w	r3, r3, #13
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	f043 0309 	orr.w	r3, r3, #9
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e28:	7bbb      	ldrb	r3, [r7, #14]
 8000e2a:	f043 030d 	orr.w	r3, r3, #13
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e32:	7bbb      	ldrb	r3, [r7, #14]
 8000e34:	f043 0309 	orr.w	r3, r3, #9
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e3c:	f107 0208 	add.w	r2, r7, #8
 8000e40:	2364      	movs	r3, #100	; 0x64
 8000e42:	9300      	str	r3, [sp, #0]
 8000e44:	2304      	movs	r3, #4
 8000e46:	214e      	movs	r1, #78	; 0x4e
 8000e48:	4803      	ldr	r0, [pc, #12]	; (8000e58 <lcd_send_data+0x5c>)
 8000e4a:	f001 fa2b 	bl	80022a4 <HAL_I2C_Master_Transmit>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	200000a0 	.word	0x200000a0

08000e5c <lcd_clear>:

void lcd_clear (void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000e62:	2080      	movs	r0, #128	; 0x80
 8000e64:	f7ff ff9a 	bl	8000d9c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	e005      	b.n	8000e7a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000e6e:	2020      	movs	r0, #32
 8000e70:	f7ff ffc4 	bl	8000dfc <lcd_send_data>
	for (int i=0; i<70; i++)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3301      	adds	r3, #1
 8000e78:	607b      	str	r3, [r7, #4]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2b45      	cmp	r3, #69	; 0x45
 8000e7e:	ddf6      	ble.n	8000e6e <lcd_clear+0x12>
	}
}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6039      	str	r1, [r7, #0]
    switch (row)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d002      	beq.n	8000e9e <lcd_put_cur+0x16>
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d005      	beq.n	8000ea8 <lcd_put_cur+0x20>
 8000e9c:	e009      	b.n	8000eb2 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ea4:	603b      	str	r3, [r7, #0]
            break;
 8000ea6:	e004      	b.n	8000eb2 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000eae:	603b      	str	r3, [r7, #0]
            break;
 8000eb0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff ff70 	bl	8000d9c <lcd_send_cmd>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <lcd_init>:


void lcd_init (void)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ec8:	2032      	movs	r0, #50	; 0x32
 8000eca:	f000 fdbb 	bl	8001a44 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ece:	2030      	movs	r0, #48	; 0x30
 8000ed0:	f7ff ff64 	bl	8000d9c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ed4:	2005      	movs	r0, #5
 8000ed6:	f000 fdb5 	bl	8001a44 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000eda:	2030      	movs	r0, #48	; 0x30
 8000edc:	f7ff ff5e 	bl	8000d9c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	f000 fdaf 	bl	8001a44 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ee6:	2030      	movs	r0, #48	; 0x30
 8000ee8:	f7ff ff58 	bl	8000d9c <lcd_send_cmd>
	HAL_Delay(10);
 8000eec:	200a      	movs	r0, #10
 8000eee:	f000 fda9 	bl	8001a44 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000ef2:	2020      	movs	r0, #32
 8000ef4:	f7ff ff52 	bl	8000d9c <lcd_send_cmd>
	HAL_Delay(10);
 8000ef8:	200a      	movs	r0, #10
 8000efa:	f000 fda3 	bl	8001a44 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000efe:	2028      	movs	r0, #40	; 0x28
 8000f00:	f7ff ff4c 	bl	8000d9c <lcd_send_cmd>
	HAL_Delay(1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f000 fd9d 	bl	8001a44 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f0a:	2008      	movs	r0, #8
 8000f0c:	f7ff ff46 	bl	8000d9c <lcd_send_cmd>
	HAL_Delay(1);
 8000f10:	2001      	movs	r0, #1
 8000f12:	f000 fd97 	bl	8001a44 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f16:	2001      	movs	r0, #1
 8000f18:	f7ff ff40 	bl	8000d9c <lcd_send_cmd>
	HAL_Delay(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f000 fd91 	bl	8001a44 <HAL_Delay>
	HAL_Delay(1);
 8000f22:	2001      	movs	r0, #1
 8000f24:	f000 fd8e 	bl	8001a44 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f28:	2006      	movs	r0, #6
 8000f2a:	f7ff ff37 	bl	8000d9c <lcd_send_cmd>
	HAL_Delay(1);
 8000f2e:	2001      	movs	r0, #1
 8000f30:	f000 fd88 	bl	8001a44 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f34:	200c      	movs	r0, #12
 8000f36:	f7ff ff31 	bl	8000d9c <lcd_send_cmd>
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f46:	e006      	b.n	8000f56 <lcd_send_string+0x18>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	607a      	str	r2, [r7, #4]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff ff53 	bl	8000dfc <lcd_send_data>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1f4      	bne.n	8000f48 <lcd_send_string+0xa>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <delay_us>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t local_time, sensor_time;
uint8_t distance;

void delay_us(uint16_t us) {
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	4603      	mov	r3, r0
 8000f70:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // set the counter value a 0
 8000f72:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <delay_us+0x2c>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us)
 8000f7a:	bf00      	nop
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <delay_us+0x2c>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d3f9      	bcc.n	8000f7c <delay_us+0x14>
		;  // wait for the counter to reach the us input in the parameter
}
 8000f88:	bf00      	nop
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	200000f8 	.word	0x200000f8

08000f98 <hcsr04_read>:

uint32_t hcsr04_read(void) {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
	local_time = 0;
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <hcsr04_read+0x6c>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // pull the TRIG pin HIGH
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	2102      	movs	r1, #2
 8000fa6:	4818      	ldr	r0, [pc, #96]	; (8001008 <hcsr04_read+0x70>)
 8000fa8:	f001 f82a 	bl	8002000 <HAL_GPIO_WritePin>
	delay_us(12);  // wait for 2 us (12 ~ 2us)
 8000fac:	200c      	movs	r0, #12
 8000fae:	f7ff ffdb 	bl	8000f68 <delay_us>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET); // pull the TRIG pin HIGH
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4814      	ldr	r0, [pc, #80]	; (8001008 <hcsr04_read+0x70>)
 8000fb8:	f001 f822 	bl	8002000 <HAL_GPIO_WritePin>
	delay_us(92);  // wait for 10 us (92 ~ 10us)
 8000fbc:	205c      	movs	r0, #92	; 0x5c
 8000fbe:	f7ff ffd3 	bl	8000f68 <delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET); // pull the TRIG pin low
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2102      	movs	r1, #2
 8000fc6:	4810      	ldr	r0, [pc, #64]	; (8001008 <hcsr04_read+0x70>)
 8000fc8:	f001 f81a 	bl	8002000 <HAL_GPIO_WritePin>

	// read the time for which the pin is high

	while (!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4)))
 8000fcc:	bf00      	nop
 8000fce:	2110      	movs	r1, #16
 8000fd0:	480d      	ldr	r0, [pc, #52]	; (8001008 <hcsr04_read+0x70>)
 8000fd2:	f000 fffd 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f8      	beq.n	8000fce <hcsr04_read+0x36>
		;  // wait for the ECHO pin to go high
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))    // while the pin is high
 8000fdc:	e007      	b.n	8000fee <hcsr04_read+0x56>
	{
		local_time++;   // measure time for which the pin is high
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <hcsr04_read+0x6c>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	3301      	adds	r3, #1
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <hcsr04_read+0x6c>)
 8000fe6:	6013      	str	r3, [r2, #0]
		delay_us(2); // wait for 1us (2 ~ 1us)
 8000fe8:	2002      	movs	r0, #2
 8000fea:	f7ff ffbd 	bl	8000f68 <delay_us>
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4))    // while the pin is high
 8000fee:	2110      	movs	r1, #16
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <hcsr04_read+0x70>)
 8000ff2:	f000 ffed 	bl	8001fd0 <HAL_GPIO_ReadPin>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f0      	bne.n	8000fde <hcsr04_read+0x46>
	}
	return local_time;
 8000ffc:	4b01      	ldr	r3, [pc, #4]	; (8001004 <hcsr04_read+0x6c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
}
 8001000:	4618      	mov	r0, r3
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000009c 	.word	0x2000009c
 8001008:	40020000 	.word	0x40020000
 800100c:	00000000 	.word	0x00000000

08001010 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001010:	b590      	push	{r4, r7, lr}
 8001012:	b087      	sub	sp, #28
 8001014:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t rxData[1];
	char str_distance[4];
	const char *title_distance = "Distance: ";
 8001016:	4b58      	ldr	r3, [pc, #352]	; (8001178 <main+0x168>)
 8001018:	613b      	str	r3, [r7, #16]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800101a:	f000 fca1 	bl	8001960 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800101e:	f000 f8bf 	bl	80011a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001022:	f000 fa49 	bl	80014b8 <MX_GPIO_Init>
	MX_TIM2_Init();
 8001026:	f000 f9a7 	bl	8001378 <MX_TIM2_Init>
	MX_USART2_UART_Init();
 800102a:	f000 fa1b 	bl	8001464 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800102e:	f000 f953 	bl	80012d8 <MX_TIM1_Init>
	MX_I2C1_Init();
 8001032:	f000 f923 	bl	800127c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001036:	2100      	movs	r1, #0
 8001038:	4850      	ldr	r0, [pc, #320]	; (800117c <main+0x16c>)
 800103a:	f002 f9d3 	bl	80033e4 <HAL_TIM_PWM_Start>
	HAL_TIM_Base_Start(&htim1);
 800103e:	4850      	ldr	r0, [pc, #320]	; (8001180 <main+0x170>)
 8001040:	f002 f977 	bl	8003332 <HAL_TIM_Base_Start>

	lcd_init();
 8001044:	f7ff ff3e 	bl	8000ec4 <lcd_init>
	/* USER CODE BEGIN WHILE */
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		HAL_UART_Receive(&huart2, rxData, 1, 1000);
 8001048:	f107 0108 	add.w	r1, r7, #8
 800104c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001050:	2201      	movs	r2, #1
 8001052:	484c      	ldr	r0, [pc, #304]	; (8001184 <main+0x174>)
 8001054:	f003 f8a9 	bl	80041aa <HAL_UART_Receive>

		if (rxData[0] == '1') { //RUN
 8001058:	7a3b      	ldrb	r3, [r7, #8]
 800105a:	2b31      	cmp	r3, #49	; 0x31
 800105c:	d173      	bne.n	8001146 <main+0x136>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 800105e:	2201      	movs	r2, #1
 8001060:	2120      	movs	r1, #32
 8001062:	4849      	ldr	r0, [pc, #292]	; (8001188 <main+0x178>)
 8001064:	f000 ffcc 	bl	8002000 <HAL_GPIO_WritePin>

			lcd_clear();
 8001068:	f7ff fef8 	bl	8000e5c <lcd_clear>
			lcd_put_cur(0, 0);
 800106c:	2100      	movs	r1, #0
 800106e:	2000      	movs	r0, #0
 8001070:	f7ff ff0a 	bl	8000e88 <lcd_put_cur>
			lcd_send_string("LOADING...");
 8001074:	4845      	ldr	r0, [pc, #276]	; (800118c <main+0x17c>)
 8001076:	f7ff ff62 	bl	8000f3e <lcd_send_string>

			int i = 40;
 800107a:	2328      	movs	r3, #40	; 0x28
 800107c:	617b      	str	r3, [r7, #20]

			HAL_Delay(1000);
 800107e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001082:	f000 fcdf 	bl	8001a44 <HAL_Delay>

			while (i < 100) {
 8001086:	e056      	b.n	8001136 <main+0x126>
				htim2.Instance->CCR1 = i;
 8001088:	4b3c      	ldr	r3, [pc, #240]	; (800117c <main+0x16c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	697a      	ldr	r2, [r7, #20]
 800108e:	635a      	str	r2, [r3, #52]	; 0x34
				sensor_time = hcsr04_read();
 8001090:	f7ff ff82 	bl	8000f98 <hcsr04_read>
 8001094:	4602      	mov	r2, r0
 8001096:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <main+0x180>)
 8001098:	601a      	str	r2, [r3, #0]
				distance = sensor_time * .034 / 2;
 800109a:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <main+0x180>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4618      	mov	r0, r3
 80010a0:	f7ff fa50 	bl	8000544 <__aeabi_ui2d>
 80010a4:	a332      	add	r3, pc, #200	; (adr r3, 8001170 <main+0x160>)
 80010a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010aa:	f7ff fac5 	bl	8000638 <__aeabi_dmul>
 80010ae:	4603      	mov	r3, r0
 80010b0:	460c      	mov	r4, r1
 80010b2:	4618      	mov	r0, r3
 80010b4:	4621      	mov	r1, r4
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010be:	f7ff fbe5 	bl	800088c <__aeabi_ddiv>
 80010c2:	4603      	mov	r3, r0
 80010c4:	460c      	mov	r4, r1
 80010c6:	4618      	mov	r0, r3
 80010c8:	4621      	mov	r1, r4
 80010ca:	f7ff fcc7 	bl	8000a5c <__aeabi_d2uiz>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b30      	ldr	r3, [pc, #192]	; (8001194 <main+0x184>)
 80010d4:	701a      	strb	r2, [r3, #0]

				sprintf(str_distance, "%lu", distance);
 80010d6:	4b2f      	ldr	r3, [pc, #188]	; (8001194 <main+0x184>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	492e      	ldr	r1, [pc, #184]	; (8001198 <main+0x188>)
 80010e0:	4618      	mov	r0, r3
 80010e2:	f003 fdc1 	bl	8004c68 <siprintf>
				distance_display = malloc(
						strlen(str_distance) + strlen(title_distance));
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff f891 	bl	8000210 <strlen>
 80010ee:	4604      	mov	r4, r0
 80010f0:	6938      	ldr	r0, [r7, #16]
 80010f2:	f7ff f88d 	bl	8000210 <strlen>
 80010f6:	4603      	mov	r3, r0
				distance_display = malloc(
 80010f8:	4423      	add	r3, r4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fcec 	bl	8004ad8 <malloc>
 8001100:	4603      	mov	r3, r0
 8001102:	60fb      	str	r3, [r7, #12]
				strcpy(distance_display, title_distance);
 8001104:	6939      	ldr	r1, [r7, #16]
 8001106:	68f8      	ldr	r0, [r7, #12]
 8001108:	f003 fddd 	bl	8004cc6 <strcpy>
				strcat(distance_display, str_distance);
 800110c:	1d3b      	adds	r3, r7, #4
 800110e:	4619      	mov	r1, r3
 8001110:	68f8      	ldr	r0, [r7, #12]
 8001112:	f003 fdc9 	bl	8004ca8 <strcat>

				lcd_clear();
 8001116:	f7ff fea1 	bl	8000e5c <lcd_clear>
				lcd_put_cur(1, 0);
 800111a:	2100      	movs	r1, #0
 800111c:	2001      	movs	r0, #1
 800111e:	f7ff feb3 	bl	8000e88 <lcd_put_cur>
				lcd_send_string(distance_display);
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f7ff ff0b 	bl	8000f3e <lcd_send_string>

				i++;
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	3301      	adds	r3, #1
 800112c:	617b      	str	r3, [r7, #20]
				HAL_Delay(300);
 800112e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001132:	f000 fc87 	bl	8001a44 <HAL_Delay>
			while (i < 100) {
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	2b63      	cmp	r3, #99	; 0x63
 800113a:	dda5      	ble.n	8001088 <main+0x78>
			}

			HAL_Delay(1000);
 800113c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001140:	f000 fc80 	bl	8001a44 <HAL_Delay>
 8001144:	e780      	b.n	8001048 <main+0x38>

		} else if (rxData[0] == '0') { //STOP
 8001146:	7a3b      	ldrb	r3, [r7, #8]
 8001148:	2b30      	cmp	r3, #48	; 0x30
 800114a:	f47f af7d 	bne.w	8001048 <main+0x38>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800114e:	2200      	movs	r2, #0
 8001150:	2120      	movs	r1, #32
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <main+0x178>)
 8001154:	f000 ff54 	bl	8002000 <HAL_GPIO_WritePin>
			lcd_clear();
 8001158:	f7ff fe80 	bl	8000e5c <lcd_clear>
			lcd_put_cur(0, 0);
 800115c:	2100      	movs	r1, #0
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fe92 	bl	8000e88 <lcd_put_cur>
			lcd_send_string("STOP...");
 8001164:	480d      	ldr	r0, [pc, #52]	; (800119c <main+0x18c>)
 8001166:	f7ff feea 	bl	8000f3e <lcd_send_string>
		HAL_UART_Receive(&huart2, rxData, 1, 1000);
 800116a:	e76d      	b.n	8001048 <main+0x38>
 800116c:	f3af 8000 	nop.w
 8001170:	b020c49c 	.word	0xb020c49c
 8001174:	3fa16872 	.word	0x3fa16872
 8001178:	0800534c 	.word	0x0800534c
 800117c:	20000138 	.word	0x20000138
 8001180:	200000f8 	.word	0x200000f8
 8001184:	20000178 	.word	0x20000178
 8001188:	40020000 	.word	0x40020000
 800118c:	08005358 	.word	0x08005358
 8001190:	20000098 	.word	0x20000098
 8001194:	200000f4 	.word	0x200000f4
 8001198:	08005364 	.word	0x08005364
 800119c:	08005368 	.word	0x08005368

080011a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b094      	sub	sp, #80	; 0x50
 80011a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80011a6:	f107 031c 	add.w	r3, r7, #28
 80011aa:	2234      	movs	r2, #52	; 0x34
 80011ac:	2100      	movs	r1, #0
 80011ae:	4618      	mov	r0, r3
 80011b0:	f003 fc9a 	bl	8004ae8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <SystemClock_Config+0xd4>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	4a29      	ldr	r2, [pc, #164]	; (8001274 <SystemClock_Config+0xd4>)
 80011ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d2:	6413      	str	r3, [r2, #64]	; 0x40
 80011d4:	4b27      	ldr	r3, [pc, #156]	; (8001274 <SystemClock_Config+0xd4>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011e0:	2300      	movs	r3, #0
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4b24      	ldr	r3, [pc, #144]	; (8001278 <SystemClock_Config+0xd8>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ec:	4a22      	ldr	r2, [pc, #136]	; (8001278 <SystemClock_Config+0xd8>)
 80011ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	4b20      	ldr	r3, [pc, #128]	; (8001278 <SystemClock_Config+0xd8>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	683b      	ldr	r3, [r7, #0]
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001200:	2301      	movs	r3, #1
 8001202:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001204:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001208:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800120a:	2302      	movs	r3, #2
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800120e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001212:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 8001214:	2304      	movs	r3, #4
 8001216:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001218:	2364      	movs	r3, #100	; 0x64
 800121a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800121c:	2302      	movs	r3, #2
 800121e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8001220:	2302      	movs	r3, #2
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8001224:	2302      	movs	r3, #2
 8001226:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001228:	f107 031c 	add.w	r3, r7, #28
 800122c:	4618      	mov	r0, r3
 800122e:	f001 fdfb 	bl	8002e28 <HAL_RCC_OscConfig>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SystemClock_Config+0x9c>
		Error_Handler();
 8001238:	f000 f9ba 	bl	80015b0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800123c:	230f      	movs	r3, #15
 800123e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001240:	2302      	movs	r3, #2
 8001242:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001248:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800124c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK) {
 8001254:	f107 0308 	add.w	r3, r7, #8
 8001258:	2103      	movs	r1, #3
 800125a:	4618      	mov	r0, r3
 800125c:	f001 fb2a 	bl	80028b4 <HAL_RCC_ClockConfig>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <SystemClock_Config+0xca>
		Error_Handler();
 8001266:	f000 f9a3 	bl	80015b0 <Error_Handler>
	}
}
 800126a:	bf00      	nop
 800126c:	3750      	adds	r7, #80	; 0x50
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	40007000 	.word	0x40007000

0800127c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001280:	4b12      	ldr	r3, [pc, #72]	; (80012cc <MX_I2C1_Init+0x50>)
 8001282:	4a13      	ldr	r2, [pc, #76]	; (80012d0 <MX_I2C1_Init+0x54>)
 8001284:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001286:	4b11      	ldr	r3, [pc, #68]	; (80012cc <MX_I2C1_Init+0x50>)
 8001288:	4a12      	ldr	r2, [pc, #72]	; (80012d4 <MX_I2C1_Init+0x58>)
 800128a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800128c:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001292:	4b0e      	ldr	r3, [pc, #56]	; (80012cc <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001298:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <MX_I2C1_Init+0x50>)
 800129a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	; (80012cc <MX_I2C1_Init+0x50>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <MX_I2C1_Init+0x50>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80012b8:	4804      	ldr	r0, [pc, #16]	; (80012cc <MX_I2C1_Init+0x50>)
 80012ba:	f000 febb 	bl	8002034 <HAL_I2C_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80012c4:	f000 f974 	bl	80015b0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	200000a0 	.word	0x200000a0
 80012d0:	40005400 	.word	0x40005400
 80012d4:	000186a0 	.word	0x000186a0

080012d8 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80012f4:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM1_Init+0x98>)
 80012f6:	4a1f      	ldr	r2, [pc, #124]	; (8001374 <MX_TIM1_Init+0x9c>)
 80012f8:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 10 - 1;
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_TIM1_Init+0x98>)
 80012fc:	2209      	movs	r2, #9
 80012fe:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1b      	ldr	r3, [pc, #108]	; (8001370 <MX_TIM1_Init+0x98>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 100 - 1;
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM1_Init+0x98>)
 8001308:	2263      	movs	r2, #99	; 0x63
 800130a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <MX_TIM1_Init+0x98>)
 800130e:	2200      	movs	r2, #0
 8001310:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM1_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM1_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM1_Init+0x98>)
 8001320:	f001 ffdc 	bl	80032dc <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM1_Init+0x56>
		Error_Handler();
 800132a:	f000 f941 	bl	80015b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM1_Init+0x98>)
 800133c:	f002 fa5e 	bl	80037fc <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM1_Init+0x72>
		Error_Handler();
 8001346:	f000 f933 	bl	80015b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001352:	463b      	mov	r3, r7
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM1_Init+0x98>)
 8001358:	f002 fe4a 	bl	8003ff0 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM1_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8001362:	f000 f925 	bl	80015b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3718      	adds	r7, #24
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	200000f8 	.word	0x200000f8
 8001374:	40010000 	.word	0x40010000

08001378 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b08e      	sub	sp, #56	; 0x38
 800137c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800137e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800138c:	f107 0320 	add.w	r3, r7, #32
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001396:	1d3b      	adds	r3, r7, #4
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]
 80013a2:	611a      	str	r2, [r3, #16]
 80013a4:	615a      	str	r2, [r3, #20]
 80013a6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80013a8:	4b2d      	ldr	r3, [pc, #180]	; (8001460 <MX_TIM2_Init+0xe8>)
 80013aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ae:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 1000 - 1;
 80013b0:	4b2b      	ldr	r3, [pc, #172]	; (8001460 <MX_TIM2_Init+0xe8>)
 80013b2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013b6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013b8:	4b29      	ldr	r3, [pc, #164]	; (8001460 <MX_TIM2_Init+0xe8>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 80013be:	4b28      	ldr	r3, [pc, #160]	; (8001460 <MX_TIM2_Init+0xe8>)
 80013c0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013c4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <MX_TIM2_Init+0xe8>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <MX_TIM2_Init+0xe8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80013d2:	4823      	ldr	r0, [pc, #140]	; (8001460 <MX_TIM2_Init+0xe8>)
 80013d4:	f001 ff82 	bl	80032dc <HAL_TIM_Base_Init>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM2_Init+0x6a>
		Error_Handler();
 80013de:	f000 f8e7 	bl	80015b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80013e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ec:	4619      	mov	r1, r3
 80013ee:	481c      	ldr	r0, [pc, #112]	; (8001460 <MX_TIM2_Init+0xe8>)
 80013f0:	f002 fa04 	bl	80037fc <HAL_TIM_ConfigClockSource>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <MX_TIM2_Init+0x86>
		Error_Handler();
 80013fa:	f000 f8d9 	bl	80015b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80013fe:	4818      	ldr	r0, [pc, #96]	; (8001460 <MX_TIM2_Init+0xe8>)
 8001400:	f001 ffbb 	bl	800337a <HAL_TIM_PWM_Init>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0x96>
		Error_Handler();
 800140a:	f000 f8d1 	bl	80015b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140e:	2300      	movs	r3, #0
 8001410:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8001416:	f107 0320 	add.w	r3, r7, #32
 800141a:	4619      	mov	r1, r3
 800141c:	4810      	ldr	r0, [pc, #64]	; (8001460 <MX_TIM2_Init+0xe8>)
 800141e:	f002 fde7 	bl	8003ff0 <HAL_TIMEx_MasterConfigSynchronization>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 8001428:	f000 f8c2 	bl	80015b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800142c:	2360      	movs	r3, #96	; 0x60
 800142e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001434:	2300      	movs	r3, #0
 8001436:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	4619      	mov	r1, r3
 8001442:	4807      	ldr	r0, [pc, #28]	; (8001460 <MX_TIM2_Init+0xe8>)
 8001444:	f002 f914 	bl	8003670 <HAL_TIM_PWM_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 800144e:	f000 f8af 	bl	80015b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8001452:	4803      	ldr	r0, [pc, #12]	; (8001460 <MX_TIM2_Init+0xe8>)
 8001454:	f000 f960 	bl	8001718 <HAL_TIM_MspPostInit>

}
 8001458:	bf00      	nop
 800145a:	3738      	adds	r7, #56	; 0x38
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}
 8001460:	20000138 	.word	0x20000138

08001464 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_USART2_UART_Init+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_USART2_UART_Init+0x4c>)
 800149c:	f002 fe38 	bl	8004110 <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80014a6:	f000 f883 	bl	80015b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	20000178 	.word	0x20000178
 80014b4:	40004400 	.word	0x40004400

080014b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	; 0x28
 80014bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b33      	ldr	r3, [pc, #204]	; (80015a0 <MX_GPIO_Init+0xe8>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	4a32      	ldr	r2, [pc, #200]	; (80015a0 <MX_GPIO_Init+0xe8>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	; 0x30
 80014de:	4b30      	ldr	r3, [pc, #192]	; (80015a0 <MX_GPIO_Init+0xe8>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b2c      	ldr	r3, [pc, #176]	; (80015a0 <MX_GPIO_Init+0xe8>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a2b      	ldr	r2, [pc, #172]	; (80015a0 <MX_GPIO_Init+0xe8>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_GPIO_Init+0xe8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b25      	ldr	r3, [pc, #148]	; (80015a0 <MX_GPIO_Init+0xe8>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150e:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <MX_GPIO_Init+0xe8>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	; 0x30
 8001516:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <MX_GPIO_Init+0xe8>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_GPIO_Init+0xe8>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <MX_GPIO_Init+0xe8>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_GPIO_Init+0xe8>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, TRIG_Pin | LD2_Pin, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	2122      	movs	r1, #34	; 0x22
 8001542:	4818      	ldr	r0, [pc, #96]	; (80015a4 <MX_GPIO_Init+0xec>)
 8001544:	f000 fd5c 	bl	8002000 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001548:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800154c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_GPIO_Init+0xf0>)
 8001550:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4619      	mov	r1, r3
 800155c:	4813      	ldr	r0, [pc, #76]	; (80015ac <MX_GPIO_Init+0xf4>)
 800155e:	f000 fba5 	bl	8001cac <HAL_GPIO_Init>

	/*Configure GPIO pins : TRIG_Pin LD2_Pin */
	GPIO_InitStruct.Pin = TRIG_Pin | LD2_Pin;
 8001562:	2322      	movs	r3, #34	; 0x22
 8001564:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001566:	2301      	movs	r3, #1
 8001568:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	480a      	ldr	r0, [pc, #40]	; (80015a4 <MX_GPIO_Init+0xec>)
 800157a:	f000 fb97 	bl	8001cac <HAL_GPIO_Init>

	/*Configure GPIO pin : ECHO_Pin */
	GPIO_InitStruct.Pin = ECHO_Pin;
 800157e:	2310      	movs	r3, #16
 8001580:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001582:	2300      	movs	r3, #0
 8001584:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_GPIO_Init+0xec>)
 8001592:	f000 fb8b 	bl	8001cac <HAL_GPIO_Init>

}
 8001596:	bf00      	nop
 8001598:	3728      	adds	r7, #40	; 0x28
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020000 	.word	0x40020000
 80015a8:	10210000 	.word	0x10210000
 80015ac:	40020800 	.word	0x40020800

080015b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_MspInit+0x4c>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_MspInit+0x4c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x4c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80015fe:	2007      	movs	r0, #7
 8001600:	f000 fb12 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001604:	bf00      	nop
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b08a      	sub	sp, #40	; 0x28
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a19      	ldr	r2, [pc, #100]	; (8001694 <HAL_I2C_MspInit+0x84>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d12b      	bne.n	800168a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_I2C_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a17      	ldr	r2, [pc, #92]	; (8001698 <HAL_I2C_MspInit+0x88>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <HAL_I2C_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800164e:	23c0      	movs	r3, #192	; 0xc0
 8001650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001652:	2312      	movs	r3, #18
 8001654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001656:	2301      	movs	r3, #1
 8001658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800165e:	2304      	movs	r3, #4
 8001660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <HAL_I2C_MspInit+0x8c>)
 800166a:	f000 fb1f 	bl	8001cac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	4b09      	ldr	r3, [pc, #36]	; (8001698 <HAL_I2C_MspInit+0x88>)
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	4a08      	ldr	r2, [pc, #32]	; (8001698 <HAL_I2C_MspInit+0x88>)
 8001678:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800167c:	6413      	str	r3, [r2, #64]	; 0x40
 800167e:	4b06      	ldr	r3, [pc, #24]	; (8001698 <HAL_I2C_MspInit+0x88>)
 8001680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001682:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800168a:	bf00      	nop
 800168c:	3728      	adds	r7, #40	; 0x28
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40005400 	.word	0x40005400
 8001698:	40023800 	.word	0x40023800
 800169c:	40020400 	.word	0x40020400

080016a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a18      	ldr	r2, [pc, #96]	; (8001710 <HAL_TIM_Base_MspInit+0x70>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d10e      	bne.n	80016d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b17      	ldr	r3, [pc, #92]	; (8001714 <HAL_TIM_Base_MspInit+0x74>)
 80016b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ba:	4a16      	ldr	r2, [pc, #88]	; (8001714 <HAL_TIM_Base_MspInit+0x74>)
 80016bc:	f043 0301 	orr.w	r3, r3, #1
 80016c0:	6453      	str	r3, [r2, #68]	; 0x44
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_TIM_Base_MspInit+0x74>)
 80016c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c6:	f003 0301 	and.w	r3, r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80016ce:	e01a      	b.n	8001706 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM2)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016d8:	d115      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_TIM_Base_MspInit+0x74>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a0c      	ldr	r2, [pc, #48]	; (8001714 <HAL_TIM_Base_MspInit+0x74>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <HAL_TIM_Base_MspInit+0x74>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	201c      	movs	r0, #28
 80016fc:	f000 fa9f 	bl	8001c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001700:	201c      	movs	r0, #28
 8001702:	f000 fab8 	bl	8001c76 <HAL_NVIC_EnableIRQ>
}
 8001706:	bf00      	nop
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40010000 	.word	0x40010000
 8001714:	40023800 	.word	0x40023800

08001718 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d11d      	bne.n	8001776 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_TIM_MspPostInit+0x68>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	4a0f      	ldr	r2, [pc, #60]	; (8001780 <HAL_TIM_MspPostInit+0x68>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	6313      	str	r3, [r2, #48]	; 0x30
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <HAL_TIM_MspPostInit+0x68>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60bb      	str	r3, [r7, #8]
 8001754:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001756:	2301      	movs	r3, #1
 8001758:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001762:	2300      	movs	r3, #0
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001766:	2301      	movs	r3, #1
 8001768:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176a:	f107 030c 	add.w	r3, r7, #12
 800176e:	4619      	mov	r1, r3
 8001770:	4804      	ldr	r0, [pc, #16]	; (8001784 <HAL_TIM_MspPostInit+0x6c>)
 8001772:	f000 fa9b 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001776:	bf00      	nop
 8001778:	3720      	adds	r7, #32
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000

08001788 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a19      	ldr	r2, [pc, #100]	; (800180c <HAL_UART_MspInit+0x84>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d12b      	bne.n	8001802 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a10      	ldr	r2, [pc, #64]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b0e      	ldr	r3, [pc, #56]	; (8001810 <HAL_UART_MspInit+0x88>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017e2:	230c      	movs	r3, #12
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ea:	2300      	movs	r3, #0
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017f2:	2307      	movs	r3, #7
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4805      	ldr	r0, [pc, #20]	; (8001814 <HAL_UART_MspInit+0x8c>)
 80017fe:	f000 fa55 	bl	8001cac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001802:	bf00      	nop
 8001804:	3728      	adds	r7, #40	; 0x28
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40004400 	.word	0x40004400
 8001810:	40023800 	.word	0x40023800
 8001814:	40020000 	.word	0x40020000

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr

08001826 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001826:	b480      	push	{r7}
 8001828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182a:	e7fe      	b.n	800182a <HardFault_Handler+0x4>

0800182c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001830:	e7fe      	b.n	8001830 <MemManage_Handler+0x4>

08001832 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001832:	b480      	push	{r7}
 8001834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001836:	e7fe      	b.n	8001836 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	e7fe      	b.n	800183c <UsageFault_Handler+0x4>

0800183e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr

0800184c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr

0800185a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800185a:	b480      	push	{r7}
 800185c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr

08001868 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800186c:	f000 f8ca 	bl	8001a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	bd80      	pop	{r7, pc}

08001874 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <TIM2_IRQHandler+0x10>)
 800187a:	f001 fdf1 	bl	8003460 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000138 	.word	0x20000138

08001888 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <_sbrk+0x50>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d102      	bne.n	800189e <_sbrk+0x16>
		heap_end = &end;
 8001898:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <_sbrk+0x50>)
 800189a:	4a10      	ldr	r2, [pc, #64]	; (80018dc <_sbrk+0x54>)
 800189c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <_sbrk+0x50>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018a4:	4b0c      	ldr	r3, [pc, #48]	; (80018d8 <_sbrk+0x50>)
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	466a      	mov	r2, sp
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d907      	bls.n	80018c2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018b2:	f003 f8e7 	bl	8004a84 <__errno>
 80018b6:	4602      	mov	r2, r0
 80018b8:	230c      	movs	r3, #12
 80018ba:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018c0:	e006      	b.n	80018d0 <_sbrk+0x48>
	}

	heap_end += incr;
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <_sbrk+0x50>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4413      	add	r3, r2
 80018ca:	4a03      	ldr	r2, [pc, #12]	; (80018d8 <_sbrk+0x50>)
 80018cc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018ce:	68fb      	ldr	r3, [r7, #12]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	2000008c 	.word	0x2000008c
 80018dc:	200001c0 	.word	0x200001c0

080018e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <SystemInit+0x28>)
 80018e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018ea:	4a07      	ldr	r2, [pc, #28]	; (8001908 <SystemInit+0x28>)
 80018ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018f4:	4b04      	ldr	r3, [pc, #16]	; (8001908 <SystemInit+0x28>)
 80018f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018fa:	609a      	str	r2, [r3, #8]
#endif
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800190c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001944 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001910:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001912:	e003      	b.n	800191c <LoopCopyDataInit>

08001914 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001914:	4b0c      	ldr	r3, [pc, #48]	; (8001948 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001916:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001918:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800191a:	3104      	adds	r1, #4

0800191c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800191c:	480b      	ldr	r0, [pc, #44]	; (800194c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800191e:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001920:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001922:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001924:	d3f6      	bcc.n	8001914 <CopyDataInit>
  ldr  r2, =_sbss
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001928:	e002      	b.n	8001930 <LoopFillZerobss>

0800192a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800192a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800192c:	f842 3b04 	str.w	r3, [r2], #4

08001930 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001930:	4b09      	ldr	r3, [pc, #36]	; (8001958 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001932:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001934:	d3f9      	bcc.n	800192a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001936:	f7ff ffd3 	bl	80018e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193a:	f003 f8a9 	bl	8004a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800193e:	f7ff fb67 	bl	8001010 <main>
  bx  lr    
 8001942:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001944:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001948:	080053cc 	.word	0x080053cc
  ldr  r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001950:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8001954:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8001958:	200001c0 	.word	0x200001c0

0800195c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800195c:	e7fe      	b.n	800195c <ADC_IRQHandler>
	...

08001960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001964:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <HAL_Init+0x40>)
 800196a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800196e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001970:	4b0b      	ldr	r3, [pc, #44]	; (80019a0 <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0a      	ldr	r2, [pc, #40]	; (80019a0 <HAL_Init+0x40>)
 8001976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	; (80019a0 <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a07      	ldr	r2, [pc, #28]	; (80019a0 <HAL_Init+0x40>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001988:	2003      	movs	r0, #3
 800198a:	f000 f94d 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800198e:	2000      	movs	r0, #0
 8001990:	f000 f808 	bl	80019a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001994:	f7ff fe14 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001998:	2300      	movs	r3, #0
}
 800199a:	4618      	mov	r0, r3
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023c00 	.word	0x40023c00

080019a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019ac:	4b12      	ldr	r3, [pc, #72]	; (80019f8 <HAL_InitTick+0x54>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x58>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80019be:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c2:	4618      	mov	r0, r3
 80019c4:	f000 f965 	bl	8001c92 <HAL_SYSTICK_Config>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00e      	b.n	80019f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2b0f      	cmp	r3, #15
 80019d6:	d80a      	bhi.n	80019ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019d8:	2200      	movs	r2, #0
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80019e0:	f000 f92d 	bl	8001c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e4:	4a06      	ldr	r2, [pc, #24]	; (8001a00 <HAL_InitTick+0x5c>)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ea:	2300      	movs	r3, #0
 80019ec:	e000      	b.n	80019f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	20000000 	.word	0x20000000
 80019fc:	20000008 	.word	0x20000008
 8001a00:	20000004 	.word	0x20000004

08001a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <HAL_IncTick+0x20>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	461a      	mov	r2, r3
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x24>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4413      	add	r3, r2
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_IncTick+0x24>)
 8001a16:	6013      	str	r3, [r2, #0]
}
 8001a18:	bf00      	nop
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	20000008 	.word	0x20000008
 8001a28:	200001b8 	.word	0x200001b8

08001a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001a30:	4b03      	ldr	r3, [pc, #12]	; (8001a40 <HAL_GetTick+0x14>)
 8001a32:	681b      	ldr	r3, [r3, #0]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr
 8001a3e:	bf00      	nop
 8001a40:	200001b8 	.word	0x200001b8

08001a44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a4c:	f7ff ffee 	bl	8001a2c <HAL_GetTick>
 8001a50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001a5c:	d005      	beq.n	8001a6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <HAL_Delay+0x40>)
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	461a      	mov	r2, r3
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	4413      	add	r3, r2
 8001a68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6a:	bf00      	nop
 8001a6c:	f7ff ffde 	bl	8001a2c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	429a      	cmp	r2, r3
 8001a7a:	d8f7      	bhi.n	8001a6c <HAL_Delay+0x28>
  {
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3710      	adds	r7, #16
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	20000008 	.word	0x20000008

08001a88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a9e:	68ba      	ldr	r2, [r7, #8]
 8001aa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ab4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ab8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <__NVIC_SetPriorityGrouping+0x44>)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	60d3      	str	r3, [r2, #12]
}
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	0a1b      	lsrs	r3, r3, #8
 8001ada:	f003 0307 	and.w	r3, r3, #7
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	db0b      	blt.n	8001b16 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	f003 021f 	and.w	r2, r3, #31
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <__NVIC_EnableIRQ+0x38>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	095b      	lsrs	r3, r3, #5
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b16:	bf00      	nop
 8001b18:	370c      	adds	r7, #12
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	e000e100 	.word	0xe000e100

08001b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b083      	sub	sp, #12
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	4603      	mov	r3, r0
 8001b30:	6039      	str	r1, [r7, #0]
 8001b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	db0a      	blt.n	8001b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	b2da      	uxtb	r2, r3
 8001b40:	490c      	ldr	r1, [pc, #48]	; (8001b74 <__NVIC_SetPriority+0x4c>)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	0112      	lsls	r2, r2, #4
 8001b48:	b2d2      	uxtb	r2, r2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b50:	e00a      	b.n	8001b68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	4908      	ldr	r1, [pc, #32]	; (8001b78 <__NVIC_SetPriority+0x50>)
 8001b58:	79fb      	ldrb	r3, [r7, #7]
 8001b5a:	f003 030f 	and.w	r3, r3, #15
 8001b5e:	3b04      	subs	r3, #4
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	b2d2      	uxtb	r2, r2
 8001b64:	440b      	add	r3, r1
 8001b66:	761a      	strb	r2, [r3, #24]
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	e000e100 	.word	0xe000e100
 8001b78:	e000ed00 	.word	0xe000ed00

08001b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b089      	sub	sp, #36	; 0x24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	60f8      	str	r0, [r7, #12]
 8001b84:	60b9      	str	r1, [r7, #8]
 8001b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f003 0307 	and.w	r3, r3, #7
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	f1c3 0307 	rsb	r3, r3, #7
 8001b96:	2b04      	cmp	r3, #4
 8001b98:	bf28      	it	cs
 8001b9a:	2304      	movcs	r3, #4
 8001b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	3304      	adds	r3, #4
 8001ba2:	2b06      	cmp	r3, #6
 8001ba4:	d902      	bls.n	8001bac <NVIC_EncodePriority+0x30>
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3b03      	subs	r3, #3
 8001baa:	e000      	b.n	8001bae <NVIC_EncodePriority+0x32>
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43da      	mvns	r2, r3
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bc4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	fa01 f303 	lsl.w	r3, r1, r3
 8001bce:	43d9      	mvns	r1, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	4313      	orrs	r3, r2
         );
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3724      	adds	r7, #36	; 0x24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bf4:	d301      	bcc.n	8001bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00f      	b.n	8001c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bfa:	4a0a      	ldr	r2, [pc, #40]	; (8001c24 <SysTick_Config+0x40>)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c02:	210f      	movs	r1, #15
 8001c04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c08:	f7ff ff8e 	bl	8001b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <SysTick_Config+0x40>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c12:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <SysTick_Config+0x40>)
 8001c14:	2207      	movs	r2, #7
 8001c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	e000e010 	.word	0xe000e010

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff29 	bl	8001a88 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff3e 	bl	8001ad0 <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ff8e 	bl	8001b7c <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff5d 	bl	8001b28 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff31 	bl	8001aec <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b082      	sub	sp, #8
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f7ff ffa2 	bl	8001be4 <SysTick_Config>
 8001ca0:	4603      	mov	r3, r0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3708      	adds	r7, #8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b089      	sub	sp, #36	; 0x24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	e165      	b.n	8001f94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cc8:	2201      	movs	r2, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8154 	bne.w	8001f8e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d00b      	beq.n	8001d06 <HAL_GPIO_Init+0x5a>
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b02      	cmp	r3, #2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001cfa:	2b11      	cmp	r3, #17
 8001cfc:	d003      	beq.n	8001d06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	2b12      	cmp	r3, #18
 8001d04:	d130      	bne.n	8001d68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 0201 	and.w	r2, r3, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	69ba      	ldr	r2, [r7, #24]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0xfc>
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b12      	cmp	r3, #18
 8001da6:	d123      	bne.n	8001df0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	08da      	lsrs	r2, r3, #3
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	3208      	adds	r2, #8
 8001db0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001db4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	220f      	movs	r2, #15
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	691a      	ldr	r2, [r3, #16]
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	08da      	lsrs	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	3208      	adds	r2, #8
 8001dea:	69b9      	ldr	r1, [r7, #24]
 8001dec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	2203      	movs	r2, #3
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	43db      	mvns	r3, r3
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	4013      	ands	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	f003 0203 	and.w	r2, r3, #3
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	fa02 f303 	lsl.w	r3, r2, r3
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 80ae 	beq.w	8001f8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e32:	2300      	movs	r3, #0
 8001e34:	60fb      	str	r3, [r7, #12]
 8001e36:	4b5c      	ldr	r3, [pc, #368]	; (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e3a:	4a5b      	ldr	r2, [pc, #364]	; (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e40:	6453      	str	r3, [r2, #68]	; 0x44
 8001e42:	4b59      	ldr	r3, [pc, #356]	; (8001fa8 <HAL_GPIO_Init+0x2fc>)
 8001e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e4e:	4a57      	ldr	r2, [pc, #348]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	089b      	lsrs	r3, r3, #2
 8001e54:	3302      	adds	r3, #2
 8001e56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e5c:	69fb      	ldr	r3, [r7, #28]
 8001e5e:	f003 0303 	and.w	r3, r3, #3
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	220f      	movs	r2, #15
 8001e66:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a4e      	ldr	r2, [pc, #312]	; (8001fb0 <HAL_GPIO_Init+0x304>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d025      	beq.n	8001ec6 <HAL_GPIO_Init+0x21a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_GPIO_Init+0x308>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d01f      	beq.n	8001ec2 <HAL_GPIO_Init+0x216>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a4c      	ldr	r2, [pc, #304]	; (8001fb8 <HAL_GPIO_Init+0x30c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d019      	beq.n	8001ebe <HAL_GPIO_Init+0x212>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4b      	ldr	r2, [pc, #300]	; (8001fbc <HAL_GPIO_Init+0x310>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d013      	beq.n	8001eba <HAL_GPIO_Init+0x20e>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_GPIO_Init+0x314>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d00d      	beq.n	8001eb6 <HAL_GPIO_Init+0x20a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a49      	ldr	r2, [pc, #292]	; (8001fc4 <HAL_GPIO_Init+0x318>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d007      	beq.n	8001eb2 <HAL_GPIO_Init+0x206>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a48      	ldr	r2, [pc, #288]	; (8001fc8 <HAL_GPIO_Init+0x31c>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d101      	bne.n	8001eae <HAL_GPIO_Init+0x202>
 8001eaa:	2306      	movs	r3, #6
 8001eac:	e00c      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eae:	2307      	movs	r3, #7
 8001eb0:	e00a      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eb2:	2305      	movs	r3, #5
 8001eb4:	e008      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e004      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ebe:	2302      	movs	r3, #2
 8001ec0:	e002      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e000      	b.n	8001ec8 <HAL_GPIO_Init+0x21c>
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	69fa      	ldr	r2, [r7, #28]
 8001eca:	f002 0203 	and.w	r2, r2, #3
 8001ece:	0092      	lsls	r2, r2, #2
 8001ed0:	4093      	lsls	r3, r2
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ed8:	4934      	ldr	r1, [pc, #208]	; (8001fac <HAL_GPIO_Init+0x300>)
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	089b      	lsrs	r3, r3, #2
 8001ede:	3302      	adds	r3, #2
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ee6:	4b39      	ldr	r3, [pc, #228]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	43db      	mvns	r3, r3
 8001ef0:	69ba      	ldr	r2, [r7, #24]
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	4313      	orrs	r3, r2
 8001f08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f0a:	4a30      	ldr	r2, [pc, #192]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f10:	4b2e      	ldr	r3, [pc, #184]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	43db      	mvns	r3, r3
 8001f1a:	69ba      	ldr	r2, [r7, #24]
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d003      	beq.n	8001f34 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f34:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f3a:	4b24      	ldr	r3, [pc, #144]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	693b      	ldr	r3, [r7, #16]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f5e:	4a1b      	ldr	r2, [pc, #108]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f64:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f88:	4a10      	ldr	r2, [pc, #64]	; (8001fcc <HAL_GPIO_Init+0x320>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	3301      	adds	r3, #1
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	2b0f      	cmp	r3, #15
 8001f98:	f67f ae96 	bls.w	8001cc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f9c:	bf00      	nop
 8001f9e:	3724      	adds	r7, #36	; 0x24
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa6:	4770      	bx	lr
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40013800 	.word	0x40013800
 8001fb0:	40020000 	.word	0x40020000
 8001fb4:	40020400 	.word	0x40020400
 8001fb8:	40020800 	.word	0x40020800
 8001fbc:	40020c00 	.word	0x40020c00
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40021400 	.word	0x40021400
 8001fc8:	40021800 	.word	0x40021800
 8001fcc:	40013c00 	.word	0x40013c00

08001fd0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	460b      	mov	r3, r1
 8001fda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691a      	ldr	r2, [r3, #16]
 8001fe0:	887b      	ldrh	r3, [r7, #2]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	73fb      	strb	r3, [r7, #15]
 8001fec:	e001      	b.n	8001ff2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	460b      	mov	r3, r1
 800200a:	807b      	strh	r3, [r7, #2]
 800200c:	4613      	mov	r3, r2
 800200e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002010:	787b      	ldrb	r3, [r7, #1]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002016:	887a      	ldrh	r2, [r7, #2]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800201c:	e003      	b.n	8002026 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800201e:	887b      	ldrh	r3, [r7, #2]
 8002020:	041a      	lsls	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	619a      	str	r2, [r3, #24]
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e11f      	b.n	8002286 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d106      	bne.n	8002060 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff fad8 	bl	8001610 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2224      	movs	r2, #36	; 0x24
 8002064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002086:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002096:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002098:	f000 fcfe 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 800209c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	4a7b      	ldr	r2, [pc, #492]	; (8002290 <HAL_I2C_Init+0x25c>)
 80020a4:	4293      	cmp	r3, r2
 80020a6:	d807      	bhi.n	80020b8 <HAL_I2C_Init+0x84>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	4a7a      	ldr	r2, [pc, #488]	; (8002294 <HAL_I2C_Init+0x260>)
 80020ac:	4293      	cmp	r3, r2
 80020ae:	bf94      	ite	ls
 80020b0:	2301      	movls	r3, #1
 80020b2:	2300      	movhi	r3, #0
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	e006      	b.n	80020c6 <HAL_I2C_Init+0x92>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a77      	ldr	r2, [pc, #476]	; (8002298 <HAL_I2C_Init+0x264>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	bf94      	ite	ls
 80020c0:	2301      	movls	r3, #1
 80020c2:	2300      	movhi	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e0db      	b.n	8002286 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	4a72      	ldr	r2, [pc, #456]	; (800229c <HAL_I2C_Init+0x268>)
 80020d2:	fba2 2303 	umull	r2, r3, r2, r3
 80020d6:	0c9b      	lsrs	r3, r3, #18
 80020d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	68ba      	ldr	r2, [r7, #8]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	4a64      	ldr	r2, [pc, #400]	; (8002290 <HAL_I2C_Init+0x25c>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d802      	bhi.n	8002108 <HAL_I2C_Init+0xd4>
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	3301      	adds	r3, #1
 8002106:	e009      	b.n	800211c <HAL_I2C_Init+0xe8>
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800210e:	fb02 f303 	mul.w	r3, r2, r3
 8002112:	4a63      	ldr	r2, [pc, #396]	; (80022a0 <HAL_I2C_Init+0x26c>)
 8002114:	fba2 2303 	umull	r2, r3, r2, r3
 8002118:	099b      	lsrs	r3, r3, #6
 800211a:	3301      	adds	r3, #1
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	430b      	orrs	r3, r1
 8002122:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	69db      	ldr	r3, [r3, #28]
 800212a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800212e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	4956      	ldr	r1, [pc, #344]	; (8002290 <HAL_I2C_Init+0x25c>)
 8002138:	428b      	cmp	r3, r1
 800213a:	d80d      	bhi.n	8002158 <HAL_I2C_Init+0x124>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1e59      	subs	r1, r3, #1
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fbb1 f3f3 	udiv	r3, r1, r3
 800214a:	3301      	adds	r3, #1
 800214c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002150:	2b04      	cmp	r3, #4
 8002152:	bf38      	it	cc
 8002154:	2304      	movcc	r3, #4
 8002156:	e04f      	b.n	80021f8 <HAL_I2C_Init+0x1c4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d111      	bne.n	8002184 <HAL_I2C_Init+0x150>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	1e58      	subs	r0, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6859      	ldr	r1, [r3, #4]
 8002168:	460b      	mov	r3, r1
 800216a:	005b      	lsls	r3, r3, #1
 800216c:	440b      	add	r3, r1
 800216e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002172:	3301      	adds	r3, #1
 8002174:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002178:	2b00      	cmp	r3, #0
 800217a:	bf0c      	ite	eq
 800217c:	2301      	moveq	r3, #1
 800217e:	2300      	movne	r3, #0
 8002180:	b2db      	uxtb	r3, r3
 8002182:	e012      	b.n	80021aa <HAL_I2C_Init+0x176>
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	1e58      	subs	r0, r3, #1
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6859      	ldr	r1, [r3, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	0099      	lsls	r1, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	fbb0 f3f3 	udiv	r3, r0, r3
 800219a:	3301      	adds	r3, #1
 800219c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d001      	beq.n	80021b2 <HAL_I2C_Init+0x17e>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e022      	b.n	80021f8 <HAL_I2C_Init+0x1c4>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10e      	bne.n	80021d8 <HAL_I2C_Init+0x1a4>
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1e58      	subs	r0, r3, #1
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6859      	ldr	r1, [r3, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	440b      	add	r3, r1
 80021c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80021cc:	3301      	adds	r3, #1
 80021ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021d6:	e00f      	b.n	80021f8 <HAL_I2C_Init+0x1c4>
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	1e58      	subs	r0, r3, #1
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6859      	ldr	r1, [r3, #4]
 80021e0:	460b      	mov	r3, r1
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	440b      	add	r3, r1
 80021e6:	0099      	lsls	r1, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80021ee:	3301      	adds	r3, #1
 80021f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021f8:	6879      	ldr	r1, [r7, #4]
 80021fa:	6809      	ldr	r1, [r1, #0]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69da      	ldr	r2, [r3, #28]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a1b      	ldr	r3, [r3, #32]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002226:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6911      	ldr	r1, [r2, #16]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68d2      	ldr	r2, [r2, #12]
 8002232:	4311      	orrs	r1, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	430b      	orrs	r3, r1
 800223a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695a      	ldr	r2, [r3, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	699b      	ldr	r3, [r3, #24]
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	430a      	orrs	r2, r1
 8002256:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f042 0201 	orr.w	r2, r2, #1
 8002266:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2220      	movs	r2, #32
 8002272:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2200      	movs	r2, #0
 800227a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3710      	adds	r7, #16
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	000186a0 	.word	0x000186a0
 8002294:	001e847f 	.word	0x001e847f
 8002298:	003d08ff 	.word	0x003d08ff
 800229c:	431bde83 	.word	0x431bde83
 80022a0:	10624dd3 	.word	0x10624dd3

080022a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b088      	sub	sp, #32
 80022a8:	af02      	add	r7, sp, #8
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	607a      	str	r2, [r7, #4]
 80022ae:	461a      	mov	r2, r3
 80022b0:	460b      	mov	r3, r1
 80022b2:	817b      	strh	r3, [r7, #10]
 80022b4:	4613      	mov	r3, r2
 80022b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022b8:	f7ff fbb8 	bl	8001a2c <HAL_GetTick>
 80022bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	2b20      	cmp	r3, #32
 80022c8:	f040 80e0 	bne.w	800248c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	2319      	movs	r3, #25
 80022d2:	2201      	movs	r2, #1
 80022d4:	4970      	ldr	r1, [pc, #448]	; (8002498 <HAL_I2C_Master_Transmit+0x1f4>)
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 f964 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80022e2:	2302      	movs	r3, #2
 80022e4:	e0d3      	b.n	800248e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <HAL_I2C_Master_Transmit+0x50>
 80022f0:	2302      	movs	r3, #2
 80022f2:	e0cc      	b.n	800248e <HAL_I2C_Master_Transmit+0x1ea>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b01      	cmp	r3, #1
 8002308:	d007      	beq.n	800231a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002328:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2221      	movs	r2, #33	; 0x21
 800232e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2210      	movs	r2, #16
 8002336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	687a      	ldr	r2, [r7, #4]
 8002344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	893a      	ldrh	r2, [r7, #8]
 800234a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002350:	b29a      	uxth	r2, r3
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	4a50      	ldr	r2, [pc, #320]	; (800249c <HAL_I2C_Master_Transmit+0x1f8>)
 800235a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800235c:	8979      	ldrh	r1, [r7, #10]
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	6a3a      	ldr	r2, [r7, #32]
 8002362:	68f8      	ldr	r0, [r7, #12]
 8002364:	f000 f89c 	bl	80024a0 <I2C_MasterRequestWrite>
 8002368:	4603      	mov	r3, r0
 800236a:	2b00      	cmp	r3, #0
 800236c:	d001      	beq.n	8002372 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800236e:	2301      	movs	r3, #1
 8002370:	e08d      	b.n	800248e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002372:	2300      	movs	r3, #0
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695b      	ldr	r3, [r3, #20]
 800237c:	613b      	str	r3, [r7, #16]
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	699b      	ldr	r3, [r3, #24]
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002388:	e066      	b.n	8002458 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	6a39      	ldr	r1, [r7, #32]
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 f9de 	bl	8002750 <I2C_WaitOnTXEFlagUntilTimeout>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d00d      	beq.n	80023b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	2b04      	cmp	r3, #4
 80023a0:	d107      	bne.n	80023b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e06b      	b.n	800248e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	f003 0304 	and.w	r3, r3, #4
 80023f0:	2b04      	cmp	r3, #4
 80023f2:	d11b      	bne.n	800242c <HAL_I2C_Master_Transmit+0x188>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d017      	beq.n	800242c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800240c:	1c5a      	adds	r2, r3, #1
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002416:	b29b      	uxth	r3, r3
 8002418:	3b01      	subs	r3, #1
 800241a:	b29a      	uxth	r2, r3
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002424:	3b01      	subs	r3, #1
 8002426:	b29a      	uxth	r2, r3
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	6a39      	ldr	r1, [r7, #32]
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f000 f9ce 	bl	80027d2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00d      	beq.n	8002458 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	2b04      	cmp	r3, #4
 8002442:	d107      	bne.n	8002454 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002452:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e01a      	b.n	800248e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800245c:	2b00      	cmp	r3, #0
 800245e:	d194      	bne.n	800238a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2220      	movs	r2, #32
 8002474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002488:	2300      	movs	r3, #0
 800248a:	e000      	b.n	800248e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800248c:	2302      	movs	r3, #2
  }
}
 800248e:	4618      	mov	r0, r3
 8002490:	3718      	adds	r7, #24
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	00100002 	.word	0x00100002
 800249c:	ffff0000 	.word	0xffff0000

080024a0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b088      	sub	sp, #32
 80024a4:	af02      	add	r7, sp, #8
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	607a      	str	r2, [r7, #4]
 80024aa:	603b      	str	r3, [r7, #0]
 80024ac:	460b      	mov	r3, r1
 80024ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d006      	beq.n	80024ca <I2C_MasterRequestWrite+0x2a>
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d003      	beq.n	80024ca <I2C_MasterRequestWrite+0x2a>
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024c8:	d108      	bne.n	80024dc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e00b      	b.n	80024f4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e0:	2b12      	cmp	r3, #18
 80024e2:	d107      	bne.n	80024f4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024f2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	9300      	str	r3, [sp, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f84f 	bl	80025a4 <I2C_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00c      	beq.n	8002526 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002520:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e035      	b.n	8002592 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800252e:	d108      	bne.n	8002542 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002530:	897b      	ldrh	r3, [r7, #10]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	e01b      	b.n	800257a <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002542:	897b      	ldrh	r3, [r7, #10]
 8002544:	11db      	asrs	r3, r3, #7
 8002546:	b2db      	uxtb	r3, r3
 8002548:	f003 0306 	and.w	r3, r3, #6
 800254c:	b2db      	uxtb	r3, r3
 800254e:	f063 030f 	orn	r3, r3, #15
 8002552:	b2da      	uxtb	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	687a      	ldr	r2, [r7, #4]
 800255e:	490f      	ldr	r1, [pc, #60]	; (800259c <I2C_MasterRequestWrite+0xfc>)
 8002560:	68f8      	ldr	r0, [r7, #12]
 8002562:	f000 f876 	bl	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e010      	b.n	8002592 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002570:	897b      	ldrh	r3, [r7, #10]
 8002572:	b2da      	uxtb	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	4908      	ldr	r1, [pc, #32]	; (80025a0 <I2C_MasterRequestWrite+0x100>)
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f866 	bl	8002652 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	00010008 	.word	0x00010008
 80025a0:	00010002 	.word	0x00010002

080025a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b084      	sub	sp, #16
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	603b      	str	r3, [r7, #0]
 80025b0:	4613      	mov	r3, r2
 80025b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80025b4:	e025      	b.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025bc:	d021      	beq.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025be:	f7ff fa35 	bl	8001a2c <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d302      	bcc.n	80025d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d116      	bne.n	8002602 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	2200      	movs	r2, #0
 80025d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2220      	movs	r2, #32
 80025de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e023      	b.n	800264a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	0c1b      	lsrs	r3, r3, #16
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b01      	cmp	r3, #1
 800260a:	d10d      	bne.n	8002628 <I2C_WaitOnFlagUntilTimeout+0x84>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	43da      	mvns	r2, r3
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	4013      	ands	r3, r2
 8002618:	b29b      	uxth	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	bf0c      	ite	eq
 800261e:	2301      	moveq	r3, #1
 8002620:	2300      	movne	r3, #0
 8002622:	b2db      	uxtb	r3, r3
 8002624:	461a      	mov	r2, r3
 8002626:	e00c      	b.n	8002642 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4013      	ands	r3, r2
 8002634:	b29b      	uxth	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf0c      	ite	eq
 800263a:	2301      	moveq	r3, #1
 800263c:	2300      	movne	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	79fb      	ldrb	r3, [r7, #7]
 8002644:	429a      	cmp	r2, r3
 8002646:	d0b6      	beq.n	80025b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
 800265e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002660:	e051      	b.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800266c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002670:	d123      	bne.n	80026ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002680:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800268a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	2200      	movs	r2, #0
 8002690:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2200      	movs	r2, #0
 800269e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	f043 0204 	orr.w	r2, r3, #4
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e046      	b.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80026c0:	d021      	beq.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026c2:	f7ff f9b3 	bl	8001a2c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	687a      	ldr	r2, [r7, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d302      	bcc.n	80026d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d116      	bne.n	8002706 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2200      	movs	r2, #0
 80026dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2220      	movs	r2, #32
 80026e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	f043 0220 	orr.w	r2, r3, #32
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	e020      	b.n	8002748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	0c1b      	lsrs	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b01      	cmp	r3, #1
 800270e:	d10c      	bne.n	800272a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	695b      	ldr	r3, [r3, #20]
 8002716:	43da      	mvns	r2, r3
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	4013      	ands	r3, r2
 800271c:	b29b      	uxth	r3, r3
 800271e:	2b00      	cmp	r3, #0
 8002720:	bf14      	ite	ne
 8002722:	2301      	movne	r3, #1
 8002724:	2300      	moveq	r3, #0
 8002726:	b2db      	uxtb	r3, r3
 8002728:	e00b      	b.n	8002742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	43da      	mvns	r2, r3
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4013      	ands	r3, r2
 8002736:	b29b      	uxth	r3, r3
 8002738:	2b00      	cmp	r3, #0
 800273a:	bf14      	ite	ne
 800273c:	2301      	movne	r3, #1
 800273e:	2300      	moveq	r3, #0
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b00      	cmp	r3, #0
 8002744:	d18d      	bne.n	8002662 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002746:	2300      	movs	r3, #0
}
 8002748:	4618      	mov	r0, r3
 800274a:	3710      	adds	r7, #16
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}

08002750 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800275c:	e02d      	b.n	80027ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f878 	bl	8002854 <I2C_IsAcknowledgeFailed>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e02d      	b.n	80027ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002774:	d021      	beq.n	80027ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7ff f959 	bl	8001a2c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	68ba      	ldr	r2, [r7, #8]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d116      	bne.n	80027ba <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2200      	movs	r2, #0
 8002790:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2220      	movs	r2, #32
 8002796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f043 0220 	orr.w	r2, r3, #32
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e007      	b.n	80027ca <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	695b      	ldr	r3, [r3, #20]
 80027c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c4:	2b80      	cmp	r3, #128	; 0x80
 80027c6:	d1ca      	bne.n	800275e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}

080027d2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027d2:	b580      	push	{r7, lr}
 80027d4:	b084      	sub	sp, #16
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	60f8      	str	r0, [r7, #12]
 80027da:	60b9      	str	r1, [r7, #8]
 80027dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80027de:	e02d      	b.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f000 f837 	bl	8002854 <I2C_IsAcknowledgeFailed>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e02d      	b.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027f6:	d021      	beq.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027f8:	f7ff f918 	bl	8001a2c <HAL_GetTick>
 80027fc:	4602      	mov	r2, r0
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	1ad3      	subs	r3, r2, r3
 8002802:	68ba      	ldr	r2, [r7, #8]
 8002804:	429a      	cmp	r2, r3
 8002806:	d302      	bcc.n	800280e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d116      	bne.n	800283c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2220      	movs	r2, #32
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f043 0220 	orr.w	r2, r3, #32
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e007      	b.n	800284c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d1ca      	bne.n	80027e0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002866:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800286a:	d11b      	bne.n	80028a4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002874:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2220      	movs	r2, #32
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f043 0204 	orr.w	r2, r3, #4
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	370c      	adds	r7, #12
 80028aa:	46bd      	mov	sp, r7
 80028ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b0:	4770      	bx	lr
	...

080028b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b084      	sub	sp, #16
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
 80028bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d101      	bne.n	80028c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0cc      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028c8:	4b68      	ldr	r3, [pc, #416]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 030f 	and.w	r3, r3, #15
 80028d0:	683a      	ldr	r2, [r7, #0]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	d90c      	bls.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028d6:	4b65      	ldr	r3, [pc, #404]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b63      	ldr	r3, [pc, #396]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d001      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e0b8      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0302 	and.w	r3, r3, #2
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d020      	beq.n	800293e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d005      	beq.n	8002914 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	4a58      	ldr	r2, [pc, #352]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002912:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0308 	and.w	r3, r3, #8
 800291c:	2b00      	cmp	r3, #0
 800291e:	d005      	beq.n	800292c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002920:	4b53      	ldr	r3, [pc, #332]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	4a52      	ldr	r2, [pc, #328]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002926:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800292a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800292c:	4b50      	ldr	r3, [pc, #320]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	494d      	ldr	r1, [pc, #308]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 800293a:	4313      	orrs	r3, r2
 800293c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d044      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b01      	cmp	r3, #1
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002952:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d119      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e07f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d003      	beq.n	8002972 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800296e:	2b03      	cmp	r3, #3
 8002970:	d107      	bne.n	8002982 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002972:	4b3f      	ldr	r3, [pc, #252]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d109      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
 8002980:	e06f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002982:	4b3b      	ldr	r3, [pc, #236]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e067      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002992:	4b37      	ldr	r3, [pc, #220]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f023 0203 	bic.w	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	4934      	ldr	r1, [pc, #208]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029a4:	f7ff f842 	bl	8001a2c <HAL_GetTick>
 80029a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029aa:	e00a      	b.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ac:	f7ff f83e 	bl	8001a2c <HAL_GetTick>
 80029b0:	4602      	mov	r2, r0
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	1ad3      	subs	r3, r2, r3
 80029b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e04f      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029c2:	4b2b      	ldr	r3, [pc, #172]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	f003 020c 	and.w	r2, r3, #12
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1eb      	bne.n	80029ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 030f 	and.w	r3, r3, #15
 80029dc:	683a      	ldr	r2, [r7, #0]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d20c      	bcs.n	80029fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029e2:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	b2d2      	uxtb	r2, r2
 80029e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ea:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCC_ClockConfig+0x1b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	683a      	ldr	r2, [r7, #0]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d001      	beq.n	80029fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e032      	b.n	8002a62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a08:	4b19      	ldr	r3, [pc, #100]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	4916      	ldr	r1, [pc, #88]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d009      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a26:	4b12      	ldr	r3, [pc, #72]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	691b      	ldr	r3, [r3, #16]
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	490e      	ldr	r1, [pc, #56]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a3a:	f000 f855 	bl	8002ae8 <HAL_RCC_GetSysClockFreq>
 8002a3e:	4601      	mov	r1, r0
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	091b      	lsrs	r3, r3, #4
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_RCC_ClockConfig+0x1c0>)
 8002a4c:	5cd3      	ldrb	r3, [r2, r3]
 8002a4e:	fa21 f303 	lsr.w	r3, r1, r3
 8002a52:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1c8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f7fe ffa2 	bl	80019a4 <HAL_InitTick>

  return HAL_OK;
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40023c00 	.word	0x40023c00
 8002a70:	40023800 	.word	0x40023800
 8002a74:	08005370 	.word	0x08005370
 8002a78:	20000000 	.word	0x20000000
 8002a7c:	20000004 	.word	0x20000004

08002a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a84:	4b03      	ldr	r3, [pc, #12]	; (8002a94 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a86:	681b      	ldr	r3, [r3, #0]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr
 8002a92:	bf00      	nop
 8002a94:	20000000 	.word	0x20000000

08002a98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a9c:	f7ff fff0 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002aa0:	4601      	mov	r1, r0
 8002aa2:	4b05      	ldr	r3, [pc, #20]	; (8002ab8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	0a9b      	lsrs	r3, r3, #10
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	4a03      	ldr	r2, [pc, #12]	; (8002abc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002aae:	5cd3      	ldrb	r3, [r2, r3]
 8002ab0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40023800 	.word	0x40023800
 8002abc:	08005380 	.word	0x08005380

08002ac0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002ac4:	f7ff ffdc 	bl	8002a80 <HAL_RCC_GetHCLKFreq>
 8002ac8:	4601      	mov	r1, r0
 8002aca:	4b05      	ldr	r3, [pc, #20]	; (8002ae0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	0b5b      	lsrs	r3, r3, #13
 8002ad0:	f003 0307 	and.w	r3, r3, #7
 8002ad4:	4a03      	ldr	r2, [pc, #12]	; (8002ae4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ad6:	5cd3      	ldrb	r3, [r2, r3]
 8002ad8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800
 8002ae4:	08005380 	.word	0x08005380

08002ae8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aea:	b087      	sub	sp, #28
 8002aec:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8002af2:	2300      	movs	r3, #0
 8002af4:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b02:	4bc6      	ldr	r3, [pc, #792]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 030c 	and.w	r3, r3, #12
 8002b0a:	2b0c      	cmp	r3, #12
 8002b0c:	f200 817e 	bhi.w	8002e0c <HAL_RCC_GetSysClockFreq+0x324>
 8002b10:	a201      	add	r2, pc, #4	; (adr r2, 8002b18 <HAL_RCC_GetSysClockFreq+0x30>)
 8002b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b16:	bf00      	nop
 8002b18:	08002b4d 	.word	0x08002b4d
 8002b1c:	08002e0d 	.word	0x08002e0d
 8002b20:	08002e0d 	.word	0x08002e0d
 8002b24:	08002e0d 	.word	0x08002e0d
 8002b28:	08002b53 	.word	0x08002b53
 8002b2c:	08002e0d 	.word	0x08002e0d
 8002b30:	08002e0d 	.word	0x08002e0d
 8002b34:	08002e0d 	.word	0x08002e0d
 8002b38:	08002b59 	.word	0x08002b59
 8002b3c:	08002e0d 	.word	0x08002e0d
 8002b40:	08002e0d 	.word	0x08002e0d
 8002b44:	08002e0d 	.word	0x08002e0d
 8002b48:	08002cb5 	.word	0x08002cb5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b4c:	4bb4      	ldr	r3, [pc, #720]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x338>)
 8002b4e:	613b      	str	r3, [r7, #16]
       break;
 8002b50:	e15f      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b52:	4bb4      	ldr	r3, [pc, #720]	; (8002e24 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002b54:	613b      	str	r3, [r7, #16]
      break;
 8002b56:	e15c      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b58:	4bb0      	ldr	r3, [pc, #704]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b60:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b62:	4bae      	ldr	r3, [pc, #696]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d04a      	beq.n	8002c04 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b6e:	4bab      	ldr	r3, [pc, #684]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	099b      	lsrs	r3, r3, #6
 8002b74:	f04f 0400 	mov.w	r4, #0
 8002b78:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b7c:	f04f 0200 	mov.w	r2, #0
 8002b80:	ea03 0501 	and.w	r5, r3, r1
 8002b84:	ea04 0602 	and.w	r6, r4, r2
 8002b88:	4629      	mov	r1, r5
 8002b8a:	4632      	mov	r2, r6
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	f04f 0400 	mov.w	r4, #0
 8002b94:	0154      	lsls	r4, r2, #5
 8002b96:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002b9a:	014b      	lsls	r3, r1, #5
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	1b49      	subs	r1, r1, r5
 8002ba2:	eb62 0206 	sbc.w	r2, r2, r6
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	f04f 0400 	mov.w	r4, #0
 8002bae:	0194      	lsls	r4, r2, #6
 8002bb0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bb4:	018b      	lsls	r3, r1, #6
 8002bb6:	1a5b      	subs	r3, r3, r1
 8002bb8:	eb64 0402 	sbc.w	r4, r4, r2
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	f04f 0200 	mov.w	r2, #0
 8002bc4:	00e2      	lsls	r2, r4, #3
 8002bc6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bca:	00d9      	lsls	r1, r3, #3
 8002bcc:	460b      	mov	r3, r1
 8002bce:	4614      	mov	r4, r2
 8002bd0:	195b      	adds	r3, r3, r5
 8002bd2:	eb44 0406 	adc.w	r4, r4, r6
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	0262      	lsls	r2, r4, #9
 8002be0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002be4:	0259      	lsls	r1, r3, #9
 8002be6:	460b      	mov	r3, r1
 8002be8:	4614      	mov	r4, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	4621      	mov	r1, r4
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f04f 0400 	mov.w	r4, #0
 8002bf4:	461a      	mov	r2, r3
 8002bf6:	4623      	mov	r3, r4
 8002bf8:	f7fd ff50 	bl	8000a9c <__aeabi_uldivmod>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	460c      	mov	r4, r1
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	e049      	b.n	8002c98 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c04:	4b85      	ldr	r3, [pc, #532]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	099b      	lsrs	r3, r3, #6
 8002c0a:	f04f 0400 	mov.w	r4, #0
 8002c0e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	ea03 0501 	and.w	r5, r3, r1
 8002c1a:	ea04 0602 	and.w	r6, r4, r2
 8002c1e:	4629      	mov	r1, r5
 8002c20:	4632      	mov	r2, r6
 8002c22:	f04f 0300 	mov.w	r3, #0
 8002c26:	f04f 0400 	mov.w	r4, #0
 8002c2a:	0154      	lsls	r4, r2, #5
 8002c2c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c30:	014b      	lsls	r3, r1, #5
 8002c32:	4619      	mov	r1, r3
 8002c34:	4622      	mov	r2, r4
 8002c36:	1b49      	subs	r1, r1, r5
 8002c38:	eb62 0206 	sbc.w	r2, r2, r6
 8002c3c:	f04f 0300 	mov.w	r3, #0
 8002c40:	f04f 0400 	mov.w	r4, #0
 8002c44:	0194      	lsls	r4, r2, #6
 8002c46:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c4a:	018b      	lsls	r3, r1, #6
 8002c4c:	1a5b      	subs	r3, r3, r1
 8002c4e:	eb64 0402 	sbc.w	r4, r4, r2
 8002c52:	f04f 0100 	mov.w	r1, #0
 8002c56:	f04f 0200 	mov.w	r2, #0
 8002c5a:	00e2      	lsls	r2, r4, #3
 8002c5c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c60:	00d9      	lsls	r1, r3, #3
 8002c62:	460b      	mov	r3, r1
 8002c64:	4614      	mov	r4, r2
 8002c66:	195b      	adds	r3, r3, r5
 8002c68:	eb44 0406 	adc.w	r4, r4, r6
 8002c6c:	f04f 0100 	mov.w	r1, #0
 8002c70:	f04f 0200 	mov.w	r2, #0
 8002c74:	02a2      	lsls	r2, r4, #10
 8002c76:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c7a:	0299      	lsls	r1, r3, #10
 8002c7c:	460b      	mov	r3, r1
 8002c7e:	4614      	mov	r4, r2
 8002c80:	4618      	mov	r0, r3
 8002c82:	4621      	mov	r1, r4
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f04f 0400 	mov.w	r4, #0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4623      	mov	r3, r4
 8002c8e:	f7fd ff05 	bl	8000a9c <__aeabi_uldivmod>
 8002c92:	4603      	mov	r3, r0
 8002c94:	460c      	mov	r4, r1
 8002c96:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c98:	4b60      	ldr	r3, [pc, #384]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	f003 0303 	and.w	r3, r3, #3
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002ca8:	697a      	ldr	r2, [r7, #20]
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb0:	613b      	str	r3, [r7, #16]
      break;
 8002cb2:	e0ae      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cb4:	4b59      	ldr	r3, [pc, #356]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cbc:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cbe:	4b57      	ldr	r3, [pc, #348]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d04a      	beq.n	8002d60 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cca:	4b54      	ldr	r3, [pc, #336]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	099b      	lsrs	r3, r3, #6
 8002cd0:	f04f 0400 	mov.w	r4, #0
 8002cd4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cd8:	f04f 0200 	mov.w	r2, #0
 8002cdc:	ea03 0501 	and.w	r5, r3, r1
 8002ce0:	ea04 0602 	and.w	r6, r4, r2
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	4632      	mov	r2, r6
 8002ce8:	f04f 0300 	mov.w	r3, #0
 8002cec:	f04f 0400 	mov.w	r4, #0
 8002cf0:	0154      	lsls	r4, r2, #5
 8002cf2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cf6:	014b      	lsls	r3, r1, #5
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	4622      	mov	r2, r4
 8002cfc:	1b49      	subs	r1, r1, r5
 8002cfe:	eb62 0206 	sbc.w	r2, r2, r6
 8002d02:	f04f 0300 	mov.w	r3, #0
 8002d06:	f04f 0400 	mov.w	r4, #0
 8002d0a:	0194      	lsls	r4, r2, #6
 8002d0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d10:	018b      	lsls	r3, r1, #6
 8002d12:	1a5b      	subs	r3, r3, r1
 8002d14:	eb64 0402 	sbc.w	r4, r4, r2
 8002d18:	f04f 0100 	mov.w	r1, #0
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	00e2      	lsls	r2, r4, #3
 8002d22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d26:	00d9      	lsls	r1, r3, #3
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4614      	mov	r4, r2
 8002d2c:	195b      	adds	r3, r3, r5
 8002d2e:	eb44 0406 	adc.w	r4, r4, r6
 8002d32:	f04f 0100 	mov.w	r1, #0
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	0262      	lsls	r2, r4, #9
 8002d3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d40:	0259      	lsls	r1, r3, #9
 8002d42:	460b      	mov	r3, r1
 8002d44:	4614      	mov	r4, r2
 8002d46:	4618      	mov	r0, r3
 8002d48:	4621      	mov	r1, r4
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f04f 0400 	mov.w	r4, #0
 8002d50:	461a      	mov	r2, r3
 8002d52:	4623      	mov	r3, r4
 8002d54:	f7fd fea2 	bl	8000a9c <__aeabi_uldivmod>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	460c      	mov	r4, r1
 8002d5c:	617b      	str	r3, [r7, #20]
 8002d5e:	e049      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d60:	4b2e      	ldr	r3, [pc, #184]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	099b      	lsrs	r3, r3, #6
 8002d66:	f04f 0400 	mov.w	r4, #0
 8002d6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d6e:	f04f 0200 	mov.w	r2, #0
 8002d72:	ea03 0501 	and.w	r5, r3, r1
 8002d76:	ea04 0602 	and.w	r6, r4, r2
 8002d7a:	4629      	mov	r1, r5
 8002d7c:	4632      	mov	r2, r6
 8002d7e:	f04f 0300 	mov.w	r3, #0
 8002d82:	f04f 0400 	mov.w	r4, #0
 8002d86:	0154      	lsls	r4, r2, #5
 8002d88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d8c:	014b      	lsls	r3, r1, #5
 8002d8e:	4619      	mov	r1, r3
 8002d90:	4622      	mov	r2, r4
 8002d92:	1b49      	subs	r1, r1, r5
 8002d94:	eb62 0206 	sbc.w	r2, r2, r6
 8002d98:	f04f 0300 	mov.w	r3, #0
 8002d9c:	f04f 0400 	mov.w	r4, #0
 8002da0:	0194      	lsls	r4, r2, #6
 8002da2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002da6:	018b      	lsls	r3, r1, #6
 8002da8:	1a5b      	subs	r3, r3, r1
 8002daa:	eb64 0402 	sbc.w	r4, r4, r2
 8002dae:	f04f 0100 	mov.w	r1, #0
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	00e2      	lsls	r2, r4, #3
 8002db8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002dbc:	00d9      	lsls	r1, r3, #3
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	4614      	mov	r4, r2
 8002dc2:	195b      	adds	r3, r3, r5
 8002dc4:	eb44 0406 	adc.w	r4, r4, r6
 8002dc8:	f04f 0100 	mov.w	r1, #0
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	02a2      	lsls	r2, r4, #10
 8002dd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dd6:	0299      	lsls	r1, r3, #10
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4614      	mov	r4, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	4621      	mov	r1, r4
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f04f 0400 	mov.w	r4, #0
 8002de6:	461a      	mov	r2, r3
 8002de8:	4623      	mov	r3, r4
 8002dea:	f7fd fe57 	bl	8000a9c <__aeabi_uldivmod>
 8002dee:	4603      	mov	r3, r0
 8002df0:	460c      	mov	r4, r1
 8002df2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002df4:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_RCC_GetSysClockFreq+0x334>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	0f1b      	lsrs	r3, r3, #28
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e08:	613b      	str	r3, [r7, #16]
      break;
 8002e0a:	e002      	b.n	8002e12 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e0c:	4b04      	ldr	r3, [pc, #16]	; (8002e20 <HAL_RCC_GetSysClockFreq+0x338>)
 8002e0e:	613b      	str	r3, [r7, #16]
      break;
 8002e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e12:	693b      	ldr	r3, [r7, #16]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	371c      	adds	r7, #28
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	00f42400 	.word	0x00f42400
 8002e24:	007a1200 	.word	0x007a1200

08002e28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0301 	and.w	r3, r3, #1
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8083 	beq.w	8002f48 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e42:	4b95      	ldr	r3, [pc, #596]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d019      	beq.n	8002e82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e4e:	4b92      	ldr	r3, [pc, #584]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d106      	bne.n	8002e68 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e5a:	4b8f      	ldr	r3, [pc, #572]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e66:	d00c      	beq.n	8002e82 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e68:	4b8b      	ldr	r3, [pc, #556]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e70:	2b0c      	cmp	r3, #12
 8002e72:	d112      	bne.n	8002e9a <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e74:	4b88      	ldr	r3, [pc, #544]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e7c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e80:	d10b      	bne.n	8002e9a <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e82:	4b85      	ldr	r3, [pc, #532]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d05b      	beq.n	8002f46 <HAL_RCC_OscConfig+0x11e>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d157      	bne.n	8002f46 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e216      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x8a>
 8002ea4:	4b7c      	ldr	r3, [pc, #496]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a7b      	ldr	r2, [pc, #492]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002eaa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eae:	6013      	str	r3, [r2, #0]
 8002eb0:	e01d      	b.n	8002eee <HAL_RCC_OscConfig+0xc6>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eba:	d10c      	bne.n	8002ed6 <HAL_RCC_OscConfig+0xae>
 8002ebc:	4b76      	ldr	r3, [pc, #472]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a75      	ldr	r2, [pc, #468]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ec2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a72      	ldr	r2, [pc, #456]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	e00b      	b.n	8002eee <HAL_RCC_OscConfig+0xc6>
 8002ed6:	4b70      	ldr	r3, [pc, #448]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a6f      	ldr	r2, [pc, #444]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eec:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d013      	beq.n	8002f1e <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fe fd99 	bl	8001a2c <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efe:	f7fe fd95 	bl	8001a2c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b64      	cmp	r3, #100	; 0x64
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e1db      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f10:	4b61      	ldr	r3, [pc, #388]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0xd6>
 8002f1c:	e014      	b.n	8002f48 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1e:	f7fe fd85 	bl	8001a2c <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f26:	f7fe fd81 	bl	8001a2c <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b64      	cmp	r3, #100	; 0x64
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e1c7      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f38:	4b57      	ldr	r3, [pc, #348]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0xfe>
 8002f44:	e000      	b.n	8002f48 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f46:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d06f      	beq.n	8003034 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f54:	4b50      	ldr	r3, [pc, #320]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 030c 	and.w	r3, r3, #12
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d017      	beq.n	8002f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f60:	4b4d      	ldr	r3, [pc, #308]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d105      	bne.n	8002f78 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f6c:	4b4a      	ldr	r3, [pc, #296]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00b      	beq.n	8002f90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f78:	4b47      	ldr	r3, [pc, #284]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f80:	2b0c      	cmp	r3, #12
 8002f82:	d11c      	bne.n	8002fbe <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f84:	4b44      	ldr	r3, [pc, #272]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f90:	4b41      	ldr	r3, [pc, #260]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x180>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d001      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e18f      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fa8:	4b3b      	ldr	r3, [pc, #236]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	00db      	lsls	r3, r3, #3
 8002fb6:	4938      	ldr	r1, [pc, #224]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fbc:	e03a      	b.n	8003034 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d020      	beq.n	8003008 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fc6:	4b35      	ldr	r3, [pc, #212]	; (800309c <HAL_RCC_OscConfig+0x274>)
 8002fc8:	2201      	movs	r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fcc:	f7fe fd2e 	bl	8001a2c <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fd4:	f7fe fd2a 	bl	8001a2c <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e170      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fe6:	4b2c      	ldr	r3, [pc, #176]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0302 	and.w	r3, r3, #2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d0f0      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff2:	4b29      	ldr	r3, [pc, #164]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	00db      	lsls	r3, r3, #3
 8003000:	4925      	ldr	r1, [pc, #148]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 8003002:	4313      	orrs	r3, r2
 8003004:	600b      	str	r3, [r1, #0]
 8003006:	e015      	b.n	8003034 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003008:	4b24      	ldr	r3, [pc, #144]	; (800309c <HAL_RCC_OscConfig+0x274>)
 800300a:	2200      	movs	r2, #0
 800300c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fd0d 	bl	8001a2c <HAL_GetTick>
 8003012:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003014:	e008      	b.n	8003028 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003016:	f7fe fd09 	bl	8001a2c <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	2b02      	cmp	r3, #2
 8003022:	d901      	bls.n	8003028 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003024:	2303      	movs	r3, #3
 8003026:	e14f      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1f0      	bne.n	8003016 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0308 	and.w	r3, r3, #8
 800303c:	2b00      	cmp	r3, #0
 800303e:	d037      	beq.n	80030b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d016      	beq.n	8003076 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003048:	4b15      	ldr	r3, [pc, #84]	; (80030a0 <HAL_RCC_OscConfig+0x278>)
 800304a:	2201      	movs	r2, #1
 800304c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800304e:	f7fe fced 	bl	8001a2c <HAL_GetTick>
 8003052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003054:	e008      	b.n	8003068 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003056:	f7fe fce9 	bl	8001a2c <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	2b02      	cmp	r3, #2
 8003062:	d901      	bls.n	8003068 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003064:	2303      	movs	r3, #3
 8003066:	e12f      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003068:	4b0b      	ldr	r3, [pc, #44]	; (8003098 <HAL_RCC_OscConfig+0x270>)
 800306a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d0f0      	beq.n	8003056 <HAL_RCC_OscConfig+0x22e>
 8003074:	e01c      	b.n	80030b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003076:	4b0a      	ldr	r3, [pc, #40]	; (80030a0 <HAL_RCC_OscConfig+0x278>)
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307c:	f7fe fcd6 	bl	8001a2c <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003082:	e00f      	b.n	80030a4 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003084:	f7fe fcd2 	bl	8001a2c <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d908      	bls.n	80030a4 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e118      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
 8003096:	bf00      	nop
 8003098:	40023800 	.word	0x40023800
 800309c:	42470000 	.word	0x42470000
 80030a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a4:	4b8a      	ldr	r3, [pc, #552]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80030a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1e9      	bne.n	8003084 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0304 	and.w	r3, r3, #4
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 8097 	beq.w	80031ec <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030be:	2300      	movs	r3, #0
 80030c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c2:	4b83      	ldr	r3, [pc, #524]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	60fb      	str	r3, [r7, #12]
 80030d2:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	4a7e      	ldr	r2, [pc, #504]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80030d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6413      	str	r3, [r2, #64]	; 0x40
 80030de:	4b7c      	ldr	r3, [pc, #496]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030e6:	60fb      	str	r3, [r7, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ee:	4b79      	ldr	r3, [pc, #484]	; (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d118      	bne.n	800312c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fa:	4b76      	ldr	r3, [pc, #472]	; (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a75      	ldr	r2, [pc, #468]	; (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003106:	f7fe fc91 	bl	8001a2c <HAL_GetTick>
 800310a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800310c:	e008      	b.n	8003120 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800310e:	f7fe fc8d 	bl	8001a2c <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0d3      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003120:	4b6c      	ldr	r3, [pc, #432]	; (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0f0      	beq.n	800310e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d106      	bne.n	8003142 <HAL_RCC_OscConfig+0x31a>
 8003134:	4b66      	ldr	r3, [pc, #408]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 8003136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003138:	4a65      	ldr	r2, [pc, #404]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	6713      	str	r3, [r2, #112]	; 0x70
 8003140:	e01c      	b.n	800317c <HAL_RCC_OscConfig+0x354>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	2b05      	cmp	r3, #5
 8003148:	d10c      	bne.n	8003164 <HAL_RCC_OscConfig+0x33c>
 800314a:	4b61      	ldr	r3, [pc, #388]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 800314c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314e:	4a60      	ldr	r2, [pc, #384]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 8003150:	f043 0304 	orr.w	r3, r3, #4
 8003154:	6713      	str	r3, [r2, #112]	; 0x70
 8003156:	4b5e      	ldr	r3, [pc, #376]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 8003158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315a:	4a5d      	ldr	r2, [pc, #372]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6713      	str	r3, [r2, #112]	; 0x70
 8003162:	e00b      	b.n	800317c <HAL_RCC_OscConfig+0x354>
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 8003166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003168:	4a59      	ldr	r2, [pc, #356]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	4b57      	ldr	r3, [pc, #348]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 8003172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003174:	4a56      	ldr	r2, [pc, #344]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	689b      	ldr	r3, [r3, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d015      	beq.n	80031b0 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fc52 	bl	8001a2c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318a:	e00a      	b.n	80031a2 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800318c:	f7fe fc4e 	bl	8001a2c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f241 3288 	movw	r2, #5000	; 0x1388
 800319a:	4293      	cmp	r3, r2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e092      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a2:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80031a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RCC_OscConfig+0x364>
 80031ae:	e014      	b.n	80031da <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b0:	f7fe fc3c 	bl	8001a2c <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031b6:	e00a      	b.n	80031ce <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b8:	f7fe fc38 	bl	8001a2c <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d901      	bls.n	80031ce <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e07c      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ce:	4b40      	ldr	r3, [pc, #256]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80031d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d1ee      	bne.n	80031b8 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031da:	7dfb      	ldrb	r3, [r7, #23]
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d105      	bne.n	80031ec <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e0:	4b3b      	ldr	r3, [pc, #236]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80031e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e4:	4a3a      	ldr	r2, [pc, #232]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80031e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d068      	beq.n	80032c6 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031f4:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 030c 	and.w	r3, r3, #12
 80031fc:	2b08      	cmp	r3, #8
 80031fe:	d060      	beq.n	80032c2 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699b      	ldr	r3, [r3, #24]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d145      	bne.n	8003294 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003208:	4b33      	ldr	r3, [pc, #204]	; (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 800320a:	2200      	movs	r2, #0
 800320c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320e:	f7fe fc0d 	bl	8001a2c <HAL_GetTick>
 8003212:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003214:	e008      	b.n	8003228 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003216:	f7fe fc09 	bl	8001a2c <HAL_GetTick>
 800321a:	4602      	mov	r2, r0
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	1ad3      	subs	r3, r2, r3
 8003220:	2b02      	cmp	r3, #2
 8003222:	d901      	bls.n	8003228 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8003224:	2303      	movs	r3, #3
 8003226:	e04f      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	4b29      	ldr	r3, [pc, #164]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003230:	2b00      	cmp	r3, #0
 8003232:	d1f0      	bne.n	8003216 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	69da      	ldr	r2, [r3, #28]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	431a      	orrs	r2, r3
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	019b      	lsls	r3, r3, #6
 8003244:	431a      	orrs	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	3b01      	subs	r3, #1
 800324e:	041b      	lsls	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003256:	061b      	lsls	r3, r3, #24
 8003258:	431a      	orrs	r2, r3
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325e:	071b      	lsls	r3, r3, #28
 8003260:	491b      	ldr	r1, [pc, #108]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 8003262:	4313      	orrs	r3, r2
 8003264:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 8003268:	2201      	movs	r2, #1
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326c:	f7fe fbde 	bl	8001a2c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe fbda 	bl	8001a2c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e020      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b12      	ldr	r3, [pc, #72]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0x44c>
 8003292:	e018      	b.n	80032c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003294:	4b10      	ldr	r3, [pc, #64]	; (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 8003296:	2200      	movs	r2, #0
 8003298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329a:	f7fe fbc7 	bl	8001a2c <HAL_GetTick>
 800329e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a0:	e008      	b.n	80032b4 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a2:	f7fe fbc3 	bl	8001a2c <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e009      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b4:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <HAL_RCC_OscConfig+0x4a8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1f0      	bne.n	80032a2 <HAL_RCC_OscConfig+0x47a>
 80032c0:	e001      	b.n	80032c6 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3718      	adds	r7, #24
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}
 80032d0:	40023800 	.word	0x40023800
 80032d4:	40007000 	.word	0x40007000
 80032d8:	42470060 	.word	0x42470060

080032dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e01d      	b.n	800332a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fe f9cc 	bl	80016a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	3304      	adds	r3, #4
 8003318:	4619      	mov	r1, r3
 800331a:	4610      	mov	r0, r2
 800331c:	f000 fb58 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2201      	movs	r2, #1
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2202      	movs	r2, #2
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b06      	cmp	r3, #6
 8003352:	d007      	beq.n	8003364 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0201 	orr.w	r2, r2, #1
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3714      	adds	r7, #20
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d101      	bne.n	800338c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e01d      	b.n	80033c8 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d106      	bne.n	80033a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f815 	bl	80033d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2202      	movs	r2, #2
 80033aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681a      	ldr	r2, [r3, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3304      	adds	r3, #4
 80033b6:	4619      	mov	r1, r3
 80033b8:	4610      	mov	r0, r2
 80033ba:	f000 fb09 	bl	80039d0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3708      	adds	r7, #8
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2201      	movs	r2, #1
 80033f4:	6839      	ldr	r1, [r7, #0]
 80033f6:	4618      	mov	r0, r3
 80033f8:	f000 fdd4 	bl	8003fa4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a15      	ldr	r2, [pc, #84]	; (8003458 <HAL_TIM_PWM_Start+0x74>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d004      	beq.n	8003410 <HAL_TIM_PWM_Start+0x2c>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a14      	ldr	r2, [pc, #80]	; (800345c <HAL_TIM_PWM_Start+0x78>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d101      	bne.n	8003414 <HAL_TIM_PWM_Start+0x30>
 8003410:	2301      	movs	r3, #1
 8003412:	e000      	b.n	8003416 <HAL_TIM_PWM_Start+0x32>
 8003414:	2300      	movs	r3, #0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003428:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b06      	cmp	r3, #6
 800343a:	d007      	beq.n	800344c <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f042 0201 	orr.w	r2, r2, #1
 800344a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	40010000 	.word	0x40010000
 800345c:	40010400 	.word	0x40010400

08003460 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691b      	ldr	r3, [r3, #16]
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b02      	cmp	r3, #2
 8003474:	d122      	bne.n	80034bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b02      	cmp	r3, #2
 8003482:	d11b      	bne.n	80034bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f06f 0202 	mvn.w	r2, #2
 800348c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 fa75 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 80034a8:	e005      	b.n	80034b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 fa67 	bl	800397e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 fa78 	bl	80039a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d122      	bne.n	8003510 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b04      	cmp	r3, #4
 80034d6:	d11b      	bne.n	8003510 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f06f 0204 	mvn.w	r2, #4
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2202      	movs	r2, #2
 80034e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fa4b 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 80034fc:	e005      	b.n	800350a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 fa3d 	bl	800397e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003504:	6878      	ldr	r0, [r7, #4]
 8003506:	f000 fa4e 	bl	80039a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	691b      	ldr	r3, [r3, #16]
 8003516:	f003 0308 	and.w	r3, r3, #8
 800351a:	2b08      	cmp	r3, #8
 800351c:	d122      	bne.n	8003564 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68db      	ldr	r3, [r3, #12]
 8003524:	f003 0308 	and.w	r3, r3, #8
 8003528:	2b08      	cmp	r3, #8
 800352a:	d11b      	bne.n	8003564 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0208 	mvn.w	r2, #8
 8003534:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2204      	movs	r2, #4
 800353a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	69db      	ldr	r3, [r3, #28]
 8003542:	f003 0303 	and.w	r3, r3, #3
 8003546:	2b00      	cmp	r3, #0
 8003548:	d003      	beq.n	8003552 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa21 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 8003550:	e005      	b.n	800355e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fa13 	bl	800397e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f000 fa24 	bl	80039a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2200      	movs	r2, #0
 8003562:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b10      	cmp	r3, #16
 8003570:	d122      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0310 	and.w	r3, r3, #16
 800357c:	2b10      	cmp	r3, #16
 800357e:	d11b      	bne.n	80035b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0210 	mvn.w	r2, #16
 8003588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2208      	movs	r2, #8
 800358e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	69db      	ldr	r3, [r3, #28]
 8003596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 f9f7 	bl	8003992 <HAL_TIM_IC_CaptureCallback>
 80035a4:	e005      	b.n	80035b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9e9 	bl	800397e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f9fa 	bl	80039a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d10e      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d107      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f06f 0201 	mvn.w	r2, #1
 80035dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f9c3 	bl	800396a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ee:	2b80      	cmp	r3, #128	; 0x80
 80035f0:	d10e      	bne.n	8003610 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035fc:	2b80      	cmp	r3, #128	; 0x80
 80035fe:	d107      	bne.n	8003610 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f000 fd76 	bl	80040fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361a:	2b40      	cmp	r3, #64	; 0x40
 800361c:	d10e      	bne.n	800363c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d107      	bne.n	800363c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 f9bf 	bl	80039ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b20      	cmp	r3, #32
 8003648:	d10e      	bne.n	8003668 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f003 0320 	and.w	r3, r3, #32
 8003654:	2b20      	cmp	r3, #32
 8003656:	d107      	bne.n	8003668 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f06f 0220 	mvn.w	r2, #32
 8003660:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f000 fd40 	bl	80040e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003668:	bf00      	nop
 800366a:	3708      	adds	r7, #8
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003682:	2b01      	cmp	r3, #1
 8003684:	d101      	bne.n	800368a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003686:	2302      	movs	r3, #2
 8003688:	e0b4      	b.n	80037f4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2202      	movs	r2, #2
 8003696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b0c      	cmp	r3, #12
 800369e:	f200 809f 	bhi.w	80037e0 <HAL_TIM_PWM_ConfigChannel+0x170>
 80036a2:	a201      	add	r2, pc, #4	; (adr r2, 80036a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	080036dd 	.word	0x080036dd
 80036ac:	080037e1 	.word	0x080037e1
 80036b0:	080037e1 	.word	0x080037e1
 80036b4:	080037e1 	.word	0x080037e1
 80036b8:	0800371d 	.word	0x0800371d
 80036bc:	080037e1 	.word	0x080037e1
 80036c0:	080037e1 	.word	0x080037e1
 80036c4:	080037e1 	.word	0x080037e1
 80036c8:	0800375f 	.word	0x0800375f
 80036cc:	080037e1 	.word	0x080037e1
 80036d0:	080037e1 	.word	0x080037e1
 80036d4:	080037e1 	.word	0x080037e1
 80036d8:	0800379f 	.word	0x0800379f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fa14 	bl	8003b10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	699a      	ldr	r2, [r3, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0208 	orr.w	r2, r2, #8
 80036f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f022 0204 	bic.w	r2, r2, #4
 8003706:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6999      	ldr	r1, [r3, #24]
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	691a      	ldr	r2, [r3, #16]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	430a      	orrs	r2, r1
 8003718:	619a      	str	r2, [r3, #24]
      break;
 800371a:	e062      	b.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68b9      	ldr	r1, [r7, #8]
 8003722:	4618      	mov	r0, r3
 8003724:	f000 fa64 	bl	8003bf0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	699a      	ldr	r2, [r3, #24]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6999      	ldr	r1, [r3, #24]
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	691b      	ldr	r3, [r3, #16]
 8003752:	021a      	lsls	r2, r3, #8
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	430a      	orrs	r2, r1
 800375a:	619a      	str	r2, [r3, #24]
      break;
 800375c:	e041      	b.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68b9      	ldr	r1, [r7, #8]
 8003764:	4618      	mov	r0, r3
 8003766:	f000 fab9 	bl	8003cdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	69da      	ldr	r2, [r3, #28]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f042 0208 	orr.w	r2, r2, #8
 8003778:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0204 	bic.w	r2, r2, #4
 8003788:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69d9      	ldr	r1, [r3, #28]
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	691a      	ldr	r2, [r3, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	61da      	str	r2, [r3, #28]
      break;
 800379c:	e021      	b.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	4618      	mov	r0, r3
 80037a6:	f000 fb0d 	bl	8003dc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	69da      	ldr	r2, [r3, #28]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	69da      	ldr	r2, [r3, #28]
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69d9      	ldr	r1, [r3, #28]
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	021a      	lsls	r2, r3, #8
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	61da      	str	r2, [r3, #28]
      break;
 80037de:	e000      	b.n	80037e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 80037e0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80037f2:	2300      	movs	r3, #0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_TIM_ConfigClockSource+0x18>
 8003810:	2302      	movs	r3, #2
 8003812:	e0a6      	b.n	8003962 <HAL_TIM_ConfigClockSource+0x166>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003832:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800383a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	68fa      	ldr	r2, [r7, #12]
 8003842:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b40      	cmp	r3, #64	; 0x40
 800384a:	d067      	beq.n	800391c <HAL_TIM_ConfigClockSource+0x120>
 800384c:	2b40      	cmp	r3, #64	; 0x40
 800384e:	d80b      	bhi.n	8003868 <HAL_TIM_ConfigClockSource+0x6c>
 8003850:	2b10      	cmp	r3, #16
 8003852:	d073      	beq.n	800393c <HAL_TIM_ConfigClockSource+0x140>
 8003854:	2b10      	cmp	r3, #16
 8003856:	d802      	bhi.n	800385e <HAL_TIM_ConfigClockSource+0x62>
 8003858:	2b00      	cmp	r3, #0
 800385a:	d06f      	beq.n	800393c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800385c:	e078      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800385e:	2b20      	cmp	r3, #32
 8003860:	d06c      	beq.n	800393c <HAL_TIM_ConfigClockSource+0x140>
 8003862:	2b30      	cmp	r3, #48	; 0x30
 8003864:	d06a      	beq.n	800393c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003866:	e073      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003868:	2b70      	cmp	r3, #112	; 0x70
 800386a:	d00d      	beq.n	8003888 <HAL_TIM_ConfigClockSource+0x8c>
 800386c:	2b70      	cmp	r3, #112	; 0x70
 800386e:	d804      	bhi.n	800387a <HAL_TIM_ConfigClockSource+0x7e>
 8003870:	2b50      	cmp	r3, #80	; 0x50
 8003872:	d033      	beq.n	80038dc <HAL_TIM_ConfigClockSource+0xe0>
 8003874:	2b60      	cmp	r3, #96	; 0x60
 8003876:	d041      	beq.n	80038fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003878:	e06a      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800387a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800387e:	d066      	beq.n	800394e <HAL_TIM_ConfigClockSource+0x152>
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003884:	d017      	beq.n	80038b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003886:	e063      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f000 fb64 	bl	8003f64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68fa      	ldr	r2, [r7, #12]
 80038b2:	609a      	str	r2, [r3, #8]
      break;
 80038b4:	e04c      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6818      	ldr	r0, [r3, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	6899      	ldr	r1, [r3, #8]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685a      	ldr	r2, [r3, #4]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	68db      	ldr	r3, [r3, #12]
 80038c6:	f000 fb4d 	bl	8003f64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689a      	ldr	r2, [r3, #8]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038d8:	609a      	str	r2, [r3, #8]
      break;
 80038da:	e039      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6818      	ldr	r0, [r3, #0]
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	461a      	mov	r2, r3
 80038ea:	f000 fac1 	bl	8003e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2150      	movs	r1, #80	; 0x50
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fb1a 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 80038fa:	e029      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6818      	ldr	r0, [r3, #0]
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6859      	ldr	r1, [r3, #4]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	461a      	mov	r2, r3
 800390a:	f000 fae0 	bl	8003ece <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2160      	movs	r1, #96	; 0x60
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fb0a 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 800391a:	e019      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6818      	ldr	r0, [r3, #0]
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	6859      	ldr	r1, [r3, #4]
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	461a      	mov	r2, r3
 800392a:	f000 faa1 	bl	8003e70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2140      	movs	r1, #64	; 0x40
 8003934:	4618      	mov	r0, r3
 8003936:	f000 fafa 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 800393a:	e009      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	4610      	mov	r0, r2
 8003948:	f000 faf1 	bl	8003f2e <TIM_ITRx_SetConfig>
      break;
 800394c:	e000      	b.n	8003950 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800394e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003960:	2300      	movs	r3, #0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003990:	4770      	bx	lr

08003992 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003992:	b480      	push	{r7}
 8003994:	b083      	sub	sp, #12
 8003996:	af00      	add	r7, sp, #0
 8003998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800399a:	bf00      	nop
 800399c:	370c      	adds	r7, #12
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr

080039ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80039ba:	b480      	push	{r7}
 80039bc:	b083      	sub	sp, #12
 80039be:	af00      	add	r7, sp, #0
 80039c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80039c2:	bf00      	nop
 80039c4:	370c      	adds	r7, #12
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr
	...

080039d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b085      	sub	sp, #20
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
 80039d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	4a40      	ldr	r2, [pc, #256]	; (8003ae4 <TIM_Base_SetConfig+0x114>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d013      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ee:	d00f      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a3d      	ldr	r2, [pc, #244]	; (8003ae8 <TIM_Base_SetConfig+0x118>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d00b      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a3c      	ldr	r2, [pc, #240]	; (8003aec <TIM_Base_SetConfig+0x11c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d007      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a3b      	ldr	r2, [pc, #236]	; (8003af0 <TIM_Base_SetConfig+0x120>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d003      	beq.n	8003a10 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a3a      	ldr	r2, [pc, #232]	; (8003af4 <TIM_Base_SetConfig+0x124>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d108      	bne.n	8003a22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a2f      	ldr	r2, [pc, #188]	; (8003ae4 <TIM_Base_SetConfig+0x114>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d02b      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a30:	d027      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a2c      	ldr	r2, [pc, #176]	; (8003ae8 <TIM_Base_SetConfig+0x118>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d023      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a2b      	ldr	r2, [pc, #172]	; (8003aec <TIM_Base_SetConfig+0x11c>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d01f      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a2a      	ldr	r2, [pc, #168]	; (8003af0 <TIM_Base_SetConfig+0x120>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d01b      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a29      	ldr	r2, [pc, #164]	; (8003af4 <TIM_Base_SetConfig+0x124>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d017      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a28      	ldr	r2, [pc, #160]	; (8003af8 <TIM_Base_SetConfig+0x128>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d013      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a27      	ldr	r2, [pc, #156]	; (8003afc <TIM_Base_SetConfig+0x12c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d00f      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a26      	ldr	r2, [pc, #152]	; (8003b00 <TIM_Base_SetConfig+0x130>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d00b      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <TIM_Base_SetConfig+0x134>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d007      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a24      	ldr	r2, [pc, #144]	; (8003b08 <TIM_Base_SetConfig+0x138>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d003      	beq.n	8003a82 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a23      	ldr	r2, [pc, #140]	; (8003b0c <TIM_Base_SetConfig+0x13c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d108      	bne.n	8003a94 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a88:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	695b      	ldr	r3, [r3, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	4a0a      	ldr	r2, [pc, #40]	; (8003ae4 <TIM_Base_SetConfig+0x114>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d003      	beq.n	8003ac8 <TIM_Base_SetConfig+0xf8>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	4a0c      	ldr	r2, [pc, #48]	; (8003af4 <TIM_Base_SetConfig+0x124>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d103      	bne.n	8003ad0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	691a      	ldr	r2, [r3, #16]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	615a      	str	r2, [r3, #20]
}
 8003ad6:	bf00      	nop
 8003ad8:	3714      	adds	r7, #20
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40010000 	.word	0x40010000
 8003ae8:	40000400 	.word	0x40000400
 8003aec:	40000800 	.word	0x40000800
 8003af0:	40000c00 	.word	0x40000c00
 8003af4:	40010400 	.word	0x40010400
 8003af8:	40014000 	.word	0x40014000
 8003afc:	40014400 	.word	0x40014400
 8003b00:	40014800 	.word	0x40014800
 8003b04:	40001800 	.word	0x40001800
 8003b08:	40001c00 	.word	0x40001c00
 8003b0c:	40002000 	.word	0x40002000

08003b10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
 8003b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6a1b      	ldr	r3, [r3, #32]
 8003b1e:	f023 0201 	bic.w	r2, r3, #1
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0303 	bic.w	r3, r3, #3
 8003b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	f023 0302 	bic.w	r3, r3, #2
 8003b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a20      	ldr	r2, [pc, #128]	; (8003be8 <TIM_OC1_SetConfig+0xd8>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC1_SetConfig+0x64>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1f      	ldr	r2, [pc, #124]	; (8003bec <TIM_OC1_SetConfig+0xdc>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d10c      	bne.n	8003b8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f023 0308 	bic.w	r3, r3, #8
 8003b7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	697a      	ldr	r2, [r7, #20]
 8003b82:	4313      	orrs	r3, r2
 8003b84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	f023 0304 	bic.w	r3, r3, #4
 8003b8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a15      	ldr	r2, [pc, #84]	; (8003be8 <TIM_OC1_SetConfig+0xd8>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d003      	beq.n	8003b9e <TIM_OC1_SetConfig+0x8e>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a14      	ldr	r2, [pc, #80]	; (8003bec <TIM_OC1_SetConfig+0xdc>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d111      	bne.n	8003bc2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ba4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	699b      	ldr	r3, [r3, #24]
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr
 8003be8:	40010000 	.word	0x40010000
 8003bec:	40010400 	.word	0x40010400

08003bf0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b087      	sub	sp, #28
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f023 0210 	bic.w	r2, r3, #16
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a1b      	ldr	r3, [r3, #32]
 8003c0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f023 0320 	bic.w	r3, r3, #32
 8003c3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	011b      	lsls	r3, r3, #4
 8003c42:	697a      	ldr	r2, [r7, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a22      	ldr	r2, [pc, #136]	; (8003cd4 <TIM_OC2_SetConfig+0xe4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d003      	beq.n	8003c58 <TIM_OC2_SetConfig+0x68>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <TIM_OC2_SetConfig+0xe8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d10d      	bne.n	8003c74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	697a      	ldr	r2, [r7, #20]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a17      	ldr	r2, [pc, #92]	; (8003cd4 <TIM_OC2_SetConfig+0xe4>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d003      	beq.n	8003c84 <TIM_OC2_SetConfig+0x94>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	4a16      	ldr	r2, [pc, #88]	; (8003cd8 <TIM_OC2_SetConfig+0xe8>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d113      	bne.n	8003cac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	695b      	ldr	r3, [r3, #20]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	621a      	str	r2, [r3, #32]
}
 8003cc6:	bf00      	nop
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40010000 	.word	0x40010000
 8003cd8:	40010400 	.word	0x40010400

08003cdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f023 0303 	bic.w	r3, r3, #3
 8003d12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	689b      	ldr	r3, [r3, #8]
 8003d2a:	021b      	lsls	r3, r3, #8
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <TIM_OC3_SetConfig+0xe0>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_OC3_SetConfig+0x66>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a20      	ldr	r2, [pc, #128]	; (8003dc0 <TIM_OC3_SetConfig+0xe4>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d10d      	bne.n	8003d5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	021b      	lsls	r3, r3, #8
 8003d50:	697a      	ldr	r2, [r7, #20]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a16      	ldr	r2, [pc, #88]	; (8003dbc <TIM_OC3_SetConfig+0xe0>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d003      	beq.n	8003d6e <TIM_OC3_SetConfig+0x92>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a15      	ldr	r2, [pc, #84]	; (8003dc0 <TIM_OC3_SetConfig+0xe4>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d113      	bne.n	8003d96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	697a      	ldr	r2, [r7, #20]
 8003dae:	621a      	str	r2, [r3, #32]
}
 8003db0:	bf00      	nop
 8003db2:	371c      	adds	r7, #28
 8003db4:	46bd      	mov	sp, r7
 8003db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dba:	4770      	bx	lr
 8003dbc:	40010000 	.word	0x40010000
 8003dc0:	40010400 	.word	0x40010400

08003dc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a1b      	ldr	r3, [r3, #32]
 8003dd2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
 8003dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	021b      	lsls	r3, r3, #8
 8003e02:	68fa      	ldr	r2, [r7, #12]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	031b      	lsls	r3, r3, #12
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	4a12      	ldr	r2, [pc, #72]	; (8003e68 <TIM_OC4_SetConfig+0xa4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d003      	beq.n	8003e2c <TIM_OC4_SetConfig+0x68>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	4a11      	ldr	r2, [pc, #68]	; (8003e6c <TIM_OC4_SetConfig+0xa8>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d109      	bne.n	8003e40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	019b      	lsls	r3, r3, #6
 8003e3a:	697a      	ldr	r2, [r7, #20]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	697a      	ldr	r2, [r7, #20]
 8003e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	685a      	ldr	r2, [r3, #4]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	621a      	str	r2, [r3, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	371c      	adds	r7, #28
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	40010000 	.word	0x40010000
 8003e6c:	40010400 	.word	0x40010400

08003e70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b087      	sub	sp, #28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	60f8      	str	r0, [r7, #12]
 8003e78:	60b9      	str	r1, [r7, #8]
 8003e7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	f023 0201 	bic.w	r2, r3, #1
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	699b      	ldr	r3, [r3, #24]
 8003e92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	011b      	lsls	r3, r3, #4
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	f023 030a 	bic.w	r3, r3, #10
 8003eac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b087      	sub	sp, #28
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	60f8      	str	r0, [r7, #12]
 8003ed6:	60b9      	str	r1, [r7, #8]
 8003ed8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0210 	bic.w	r2, r3, #16
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ef8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	031b      	lsls	r3, r3, #12
 8003efe:	697a      	ldr	r2, [r7, #20]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	011b      	lsls	r3, r3, #4
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	697a      	ldr	r2, [r7, #20]
 8003f1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b085      	sub	sp, #20
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f46:	683a      	ldr	r2, [r7, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	f043 0307 	orr.w	r3, r3, #7
 8003f50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68fa      	ldr	r2, [r7, #12]
 8003f56:	609a      	str	r2, [r3, #8]
}
 8003f58:	bf00      	nop
 8003f5a:	3714      	adds	r7, #20
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
 8003f70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	021a      	lsls	r2, r3, #8
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	609a      	str	r2, [r3, #8]
}
 8003f98:	bf00      	nop
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr

08003fa4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b087      	sub	sp, #28
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f003 031f 	and.w	r3, r3, #31
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a1a      	ldr	r2, [r3, #32]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	43db      	mvns	r3, r3
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1a      	ldr	r2, [r3, #32]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 031f 	and.w	r3, r3, #31
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
	...

08003ff0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
 8003ff8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004004:	2302      	movs	r3, #2
 8004006:	e05a      	b.n	80040be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a21      	ldr	r2, [pc, #132]	; (80040cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d022      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004054:	d01d      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a1d      	ldr	r2, [pc, #116]	; (80040d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d018      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a1b      	ldr	r2, [pc, #108]	; (80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d013      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a1a      	ldr	r2, [pc, #104]	; (80040d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00e      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a18      	ldr	r2, [pc, #96]	; (80040dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d009      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a17      	ldr	r2, [pc, #92]	; (80040e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d004      	beq.n	8004092 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a15      	ldr	r2, [pc, #84]	; (80040e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d10c      	bne.n	80040ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004098:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68ba      	ldr	r2, [r7, #8]
 80040aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2201      	movs	r2, #1
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2200      	movs	r2, #0
 80040b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40001800 	.word	0x40001800

080040e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b083      	sub	sp, #12
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040f0:	bf00      	nop
 80040f2:	370c      	adds	r7, #12
 80040f4:	46bd      	mov	sp, r7
 80040f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fa:	4770      	bx	lr

080040fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b083      	sub	sp, #12
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e03f      	b.n	80041a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7fd fb26 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2224      	movs	r2, #36	; 0x24
 8004140:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004154:	6878      	ldr	r0, [r7, #4]
 8004156:	f000 f919 	bl	800438c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691a      	ldr	r2, [r3, #16]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695a      	ldr	r2, [r3, #20]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2220      	movs	r2, #32
 8004194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b088      	sub	sp, #32
 80041ae:	af02      	add	r7, sp, #8
 80041b0:	60f8      	str	r0, [r7, #12]
 80041b2:	60b9      	str	r1, [r7, #8]
 80041b4:	603b      	str	r3, [r7, #0]
 80041b6:	4613      	mov	r3, r2
 80041b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	f040 8090 	bne.w	80042ec <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_UART_Receive+0x2e>
 80041d2:	88fb      	ldrh	r3, [r7, #6]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d101      	bne.n	80041dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e088      	b.n	80042ee <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d101      	bne.n	80041ea <HAL_UART_Receive+0x40>
 80041e6:	2302      	movs	r3, #2
 80041e8:	e081      	b.n	80042ee <HAL_UART_Receive+0x144>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2201      	movs	r2, #1
 80041ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2200      	movs	r2, #0
 80041f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2222      	movs	r2, #34	; 0x22
 80041fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004200:	f7fd fc14 	bl	8001a2c <HAL_GetTick>
 8004204:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	88fa      	ldrh	r2, [r7, #6]
 800420a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	88fa      	ldrh	r2, [r7, #6]
 8004210:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800421a:	e05c      	b.n	80042d6 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004220:	b29b      	uxth	r3, r3
 8004222:	3b01      	subs	r3, #1
 8004224:	b29a      	uxth	r2, r3
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d12b      	bne.n	800428c <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	2200      	movs	r2, #0
 800423c:	2120      	movs	r1, #32
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 f859 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d001      	beq.n	800424e <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e04f      	b.n	80042ee <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10c      	bne.n	8004274 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	b29b      	uxth	r3, r3
 8004262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004266:	b29a      	uxth	r2, r3
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	3302      	adds	r3, #2
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	e030      	b.n	80042d6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	b29b      	uxth	r3, r3
 800427c:	b2db      	uxtb	r3, r3
 800427e:	b29a      	uxth	r2, r3
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	3301      	adds	r3, #1
 8004288:	60bb      	str	r3, [r7, #8]
 800428a:	e024      	b.n	80042d6 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	2200      	movs	r2, #0
 8004294:	2120      	movs	r1, #32
 8004296:	68f8      	ldr	r0, [r7, #12]
 8004298:	f000 f82d 	bl	80042f6 <UART_WaitOnFlagUntilTimeout>
 800429c:	4603      	mov	r3, r0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d001      	beq.n	80042a6 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e023      	b.n	80042ee <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d108      	bne.n	80042c0 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6859      	ldr	r1, [r3, #4]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	60ba      	str	r2, [r7, #8]
 80042ba:	b2ca      	uxtb	r2, r1
 80042bc:	701a      	strb	r2, [r3, #0]
 80042be:	e00a      	b.n	80042d6 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042da:	b29b      	uxth	r3, r3
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d19d      	bne.n	800421c <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2220      	movs	r2, #32
 80042e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 80042e8:	2300      	movs	r3, #0
 80042ea:	e000      	b.n	80042ee <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 80042ec:	2302      	movs	r3, #2
  }
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004306:	e02c      	b.n	8004362 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800430e:	d028      	beq.n	8004362 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d007      	beq.n	8004326 <UART_WaitOnFlagUntilTimeout+0x30>
 8004316:	f7fd fb89 	bl	8001a2c <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	69ba      	ldr	r2, [r7, #24]
 8004322:	429a      	cmp	r2, r3
 8004324:	d21d      	bcs.n	8004362 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004334:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	695a      	ldr	r2, [r3, #20]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2220      	movs	r2, #32
 8004352:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e00f      	b.n	8004382 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	4013      	ands	r3, r2
 800436c:	68ba      	ldr	r2, [r7, #8]
 800436e:	429a      	cmp	r2, r3
 8004370:	bf0c      	ite	eq
 8004372:	2301      	moveq	r3, #1
 8004374:	2300      	movne	r3, #0
 8004376:	b2db      	uxtb	r3, r3
 8004378:	461a      	mov	r2, r3
 800437a:	79fb      	ldrb	r3, [r7, #7]
 800437c:	429a      	cmp	r2, r3
 800437e:	d0c3      	beq.n	8004308 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3710      	adds	r7, #16
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800438c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004390:	b085      	sub	sp, #20
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691b      	ldr	r3, [r3, #16]
 800439c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689a      	ldr	r2, [r3, #8]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	431a      	orrs	r2, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80043ce:	f023 030c 	bic.w	r3, r3, #12
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	6812      	ldr	r2, [r2, #0]
 80043d6:	68f9      	ldr	r1, [r7, #12]
 80043d8:	430b      	orrs	r3, r1
 80043da:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	695b      	ldr	r3, [r3, #20]
 80043e2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699a      	ldr	r2, [r3, #24]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	430a      	orrs	r2, r1
 80043f0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043fa:	f040 818b 	bne.w	8004714 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4ac1      	ldr	r2, [pc, #772]	; (8004708 <UART_SetConfig+0x37c>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d005      	beq.n	8004414 <UART_SetConfig+0x88>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4abf      	ldr	r2, [pc, #764]	; (800470c <UART_SetConfig+0x380>)
 800440e:	4293      	cmp	r3, r2
 8004410:	f040 80bd 	bne.w	800458e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004414:	f7fe fb54 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 8004418:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	461d      	mov	r5, r3
 800441e:	f04f 0600 	mov.w	r6, #0
 8004422:	46a8      	mov	r8, r5
 8004424:	46b1      	mov	r9, r6
 8004426:	eb18 0308 	adds.w	r3, r8, r8
 800442a:	eb49 0409 	adc.w	r4, r9, r9
 800442e:	4698      	mov	r8, r3
 8004430:	46a1      	mov	r9, r4
 8004432:	eb18 0805 	adds.w	r8, r8, r5
 8004436:	eb49 0906 	adc.w	r9, r9, r6
 800443a:	f04f 0100 	mov.w	r1, #0
 800443e:	f04f 0200 	mov.w	r2, #0
 8004442:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004446:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800444a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800444e:	4688      	mov	r8, r1
 8004450:	4691      	mov	r9, r2
 8004452:	eb18 0005 	adds.w	r0, r8, r5
 8004456:	eb49 0106 	adc.w	r1, r9, r6
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	461d      	mov	r5, r3
 8004460:	f04f 0600 	mov.w	r6, #0
 8004464:	196b      	adds	r3, r5, r5
 8004466:	eb46 0406 	adc.w	r4, r6, r6
 800446a:	461a      	mov	r2, r3
 800446c:	4623      	mov	r3, r4
 800446e:	f7fc fb15 	bl	8000a9c <__aeabi_uldivmod>
 8004472:	4603      	mov	r3, r0
 8004474:	460c      	mov	r4, r1
 8004476:	461a      	mov	r2, r3
 8004478:	4ba5      	ldr	r3, [pc, #660]	; (8004710 <UART_SetConfig+0x384>)
 800447a:	fba3 2302 	umull	r2, r3, r3, r2
 800447e:	095b      	lsrs	r3, r3, #5
 8004480:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	461d      	mov	r5, r3
 8004488:	f04f 0600 	mov.w	r6, #0
 800448c:	46a9      	mov	r9, r5
 800448e:	46b2      	mov	sl, r6
 8004490:	eb19 0309 	adds.w	r3, r9, r9
 8004494:	eb4a 040a 	adc.w	r4, sl, sl
 8004498:	4699      	mov	r9, r3
 800449a:	46a2      	mov	sl, r4
 800449c:	eb19 0905 	adds.w	r9, r9, r5
 80044a0:	eb4a 0a06 	adc.w	sl, sl, r6
 80044a4:	f04f 0100 	mov.w	r1, #0
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80044b4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80044b8:	4689      	mov	r9, r1
 80044ba:	4692      	mov	sl, r2
 80044bc:	eb19 0005 	adds.w	r0, r9, r5
 80044c0:	eb4a 0106 	adc.w	r1, sl, r6
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	685b      	ldr	r3, [r3, #4]
 80044c8:	461d      	mov	r5, r3
 80044ca:	f04f 0600 	mov.w	r6, #0
 80044ce:	196b      	adds	r3, r5, r5
 80044d0:	eb46 0406 	adc.w	r4, r6, r6
 80044d4:	461a      	mov	r2, r3
 80044d6:	4623      	mov	r3, r4
 80044d8:	f7fc fae0 	bl	8000a9c <__aeabi_uldivmod>
 80044dc:	4603      	mov	r3, r0
 80044de:	460c      	mov	r4, r1
 80044e0:	461a      	mov	r2, r3
 80044e2:	4b8b      	ldr	r3, [pc, #556]	; (8004710 <UART_SetConfig+0x384>)
 80044e4:	fba3 1302 	umull	r1, r3, r3, r2
 80044e8:	095b      	lsrs	r3, r3, #5
 80044ea:	2164      	movs	r1, #100	; 0x64
 80044ec:	fb01 f303 	mul.w	r3, r1, r3
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	3332      	adds	r3, #50	; 0x32
 80044f6:	4a86      	ldr	r2, [pc, #536]	; (8004710 <UART_SetConfig+0x384>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	095b      	lsrs	r3, r3, #5
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004504:	4498      	add	r8, r3
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	461d      	mov	r5, r3
 800450a:	f04f 0600 	mov.w	r6, #0
 800450e:	46a9      	mov	r9, r5
 8004510:	46b2      	mov	sl, r6
 8004512:	eb19 0309 	adds.w	r3, r9, r9
 8004516:	eb4a 040a 	adc.w	r4, sl, sl
 800451a:	4699      	mov	r9, r3
 800451c:	46a2      	mov	sl, r4
 800451e:	eb19 0905 	adds.w	r9, r9, r5
 8004522:	eb4a 0a06 	adc.w	sl, sl, r6
 8004526:	f04f 0100 	mov.w	r1, #0
 800452a:	f04f 0200 	mov.w	r2, #0
 800452e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004532:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004536:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800453a:	4689      	mov	r9, r1
 800453c:	4692      	mov	sl, r2
 800453e:	eb19 0005 	adds.w	r0, r9, r5
 8004542:	eb4a 0106 	adc.w	r1, sl, r6
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	461d      	mov	r5, r3
 800454c:	f04f 0600 	mov.w	r6, #0
 8004550:	196b      	adds	r3, r5, r5
 8004552:	eb46 0406 	adc.w	r4, r6, r6
 8004556:	461a      	mov	r2, r3
 8004558:	4623      	mov	r3, r4
 800455a:	f7fc fa9f 	bl	8000a9c <__aeabi_uldivmod>
 800455e:	4603      	mov	r3, r0
 8004560:	460c      	mov	r4, r1
 8004562:	461a      	mov	r2, r3
 8004564:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <UART_SetConfig+0x384>)
 8004566:	fba3 1302 	umull	r1, r3, r3, r2
 800456a:	095b      	lsrs	r3, r3, #5
 800456c:	2164      	movs	r1, #100	; 0x64
 800456e:	fb01 f303 	mul.w	r3, r1, r3
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	00db      	lsls	r3, r3, #3
 8004576:	3332      	adds	r3, #50	; 0x32
 8004578:	4a65      	ldr	r2, [pc, #404]	; (8004710 <UART_SetConfig+0x384>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	095b      	lsrs	r3, r3, #5
 8004580:	f003 0207 	and.w	r2, r3, #7
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4442      	add	r2, r8
 800458a:	609a      	str	r2, [r3, #8]
 800458c:	e26f      	b.n	8004a6e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800458e:	f7fe fa83 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 8004592:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	461d      	mov	r5, r3
 8004598:	f04f 0600 	mov.w	r6, #0
 800459c:	46a8      	mov	r8, r5
 800459e:	46b1      	mov	r9, r6
 80045a0:	eb18 0308 	adds.w	r3, r8, r8
 80045a4:	eb49 0409 	adc.w	r4, r9, r9
 80045a8:	4698      	mov	r8, r3
 80045aa:	46a1      	mov	r9, r4
 80045ac:	eb18 0805 	adds.w	r8, r8, r5
 80045b0:	eb49 0906 	adc.w	r9, r9, r6
 80045b4:	f04f 0100 	mov.w	r1, #0
 80045b8:	f04f 0200 	mov.w	r2, #0
 80045bc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80045c0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80045c4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80045c8:	4688      	mov	r8, r1
 80045ca:	4691      	mov	r9, r2
 80045cc:	eb18 0005 	adds.w	r0, r8, r5
 80045d0:	eb49 0106 	adc.w	r1, r9, r6
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	461d      	mov	r5, r3
 80045da:	f04f 0600 	mov.w	r6, #0
 80045de:	196b      	adds	r3, r5, r5
 80045e0:	eb46 0406 	adc.w	r4, r6, r6
 80045e4:	461a      	mov	r2, r3
 80045e6:	4623      	mov	r3, r4
 80045e8:	f7fc fa58 	bl	8000a9c <__aeabi_uldivmod>
 80045ec:	4603      	mov	r3, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	461a      	mov	r2, r3
 80045f2:	4b47      	ldr	r3, [pc, #284]	; (8004710 <UART_SetConfig+0x384>)
 80045f4:	fba3 2302 	umull	r2, r3, r3, r2
 80045f8:	095b      	lsrs	r3, r3, #5
 80045fa:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	461d      	mov	r5, r3
 8004602:	f04f 0600 	mov.w	r6, #0
 8004606:	46a9      	mov	r9, r5
 8004608:	46b2      	mov	sl, r6
 800460a:	eb19 0309 	adds.w	r3, r9, r9
 800460e:	eb4a 040a 	adc.w	r4, sl, sl
 8004612:	4699      	mov	r9, r3
 8004614:	46a2      	mov	sl, r4
 8004616:	eb19 0905 	adds.w	r9, r9, r5
 800461a:	eb4a 0a06 	adc.w	sl, sl, r6
 800461e:	f04f 0100 	mov.w	r1, #0
 8004622:	f04f 0200 	mov.w	r2, #0
 8004626:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800462e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004632:	4689      	mov	r9, r1
 8004634:	4692      	mov	sl, r2
 8004636:	eb19 0005 	adds.w	r0, r9, r5
 800463a:	eb4a 0106 	adc.w	r1, sl, r6
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	461d      	mov	r5, r3
 8004644:	f04f 0600 	mov.w	r6, #0
 8004648:	196b      	adds	r3, r5, r5
 800464a:	eb46 0406 	adc.w	r4, r6, r6
 800464e:	461a      	mov	r2, r3
 8004650:	4623      	mov	r3, r4
 8004652:	f7fc fa23 	bl	8000a9c <__aeabi_uldivmod>
 8004656:	4603      	mov	r3, r0
 8004658:	460c      	mov	r4, r1
 800465a:	461a      	mov	r2, r3
 800465c:	4b2c      	ldr	r3, [pc, #176]	; (8004710 <UART_SetConfig+0x384>)
 800465e:	fba3 1302 	umull	r1, r3, r3, r2
 8004662:	095b      	lsrs	r3, r3, #5
 8004664:	2164      	movs	r1, #100	; 0x64
 8004666:	fb01 f303 	mul.w	r3, r1, r3
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	00db      	lsls	r3, r3, #3
 800466e:	3332      	adds	r3, #50	; 0x32
 8004670:	4a27      	ldr	r2, [pc, #156]	; (8004710 <UART_SetConfig+0x384>)
 8004672:	fba2 2303 	umull	r2, r3, r2, r3
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	005b      	lsls	r3, r3, #1
 800467a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800467e:	4498      	add	r8, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	461d      	mov	r5, r3
 8004684:	f04f 0600 	mov.w	r6, #0
 8004688:	46a9      	mov	r9, r5
 800468a:	46b2      	mov	sl, r6
 800468c:	eb19 0309 	adds.w	r3, r9, r9
 8004690:	eb4a 040a 	adc.w	r4, sl, sl
 8004694:	4699      	mov	r9, r3
 8004696:	46a2      	mov	sl, r4
 8004698:	eb19 0905 	adds.w	r9, r9, r5
 800469c:	eb4a 0a06 	adc.w	sl, sl, r6
 80046a0:	f04f 0100 	mov.w	r1, #0
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046ac:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80046b0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80046b4:	4689      	mov	r9, r1
 80046b6:	4692      	mov	sl, r2
 80046b8:	eb19 0005 	adds.w	r0, r9, r5
 80046bc:	eb4a 0106 	adc.w	r1, sl, r6
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	461d      	mov	r5, r3
 80046c6:	f04f 0600 	mov.w	r6, #0
 80046ca:	196b      	adds	r3, r5, r5
 80046cc:	eb46 0406 	adc.w	r4, r6, r6
 80046d0:	461a      	mov	r2, r3
 80046d2:	4623      	mov	r3, r4
 80046d4:	f7fc f9e2 	bl	8000a9c <__aeabi_uldivmod>
 80046d8:	4603      	mov	r3, r0
 80046da:	460c      	mov	r4, r1
 80046dc:	461a      	mov	r2, r3
 80046de:	4b0c      	ldr	r3, [pc, #48]	; (8004710 <UART_SetConfig+0x384>)
 80046e0:	fba3 1302 	umull	r1, r3, r3, r2
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	2164      	movs	r1, #100	; 0x64
 80046e8:	fb01 f303 	mul.w	r3, r1, r3
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	3332      	adds	r3, #50	; 0x32
 80046f2:	4a07      	ldr	r2, [pc, #28]	; (8004710 <UART_SetConfig+0x384>)
 80046f4:	fba2 2303 	umull	r2, r3, r2, r3
 80046f8:	095b      	lsrs	r3, r3, #5
 80046fa:	f003 0207 	and.w	r2, r3, #7
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4442      	add	r2, r8
 8004704:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004706:	e1b2      	b.n	8004a6e <UART_SetConfig+0x6e2>
 8004708:	40011000 	.word	0x40011000
 800470c:	40011400 	.word	0x40011400
 8004710:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4ad7      	ldr	r2, [pc, #860]	; (8004a78 <UART_SetConfig+0x6ec>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d005      	beq.n	800472a <UART_SetConfig+0x39e>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4ad6      	ldr	r2, [pc, #856]	; (8004a7c <UART_SetConfig+0x6f0>)
 8004724:	4293      	cmp	r3, r2
 8004726:	f040 80d1 	bne.w	80048cc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800472a:	f7fe f9c9 	bl	8002ac0 <HAL_RCC_GetPCLK2Freq>
 800472e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	469a      	mov	sl, r3
 8004734:	f04f 0b00 	mov.w	fp, #0
 8004738:	46d0      	mov	r8, sl
 800473a:	46d9      	mov	r9, fp
 800473c:	eb18 0308 	adds.w	r3, r8, r8
 8004740:	eb49 0409 	adc.w	r4, r9, r9
 8004744:	4698      	mov	r8, r3
 8004746:	46a1      	mov	r9, r4
 8004748:	eb18 080a 	adds.w	r8, r8, sl
 800474c:	eb49 090b 	adc.w	r9, r9, fp
 8004750:	f04f 0100 	mov.w	r1, #0
 8004754:	f04f 0200 	mov.w	r2, #0
 8004758:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800475c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004760:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004764:	4688      	mov	r8, r1
 8004766:	4691      	mov	r9, r2
 8004768:	eb1a 0508 	adds.w	r5, sl, r8
 800476c:	eb4b 0609 	adc.w	r6, fp, r9
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	4619      	mov	r1, r3
 8004776:	f04f 0200 	mov.w	r2, #0
 800477a:	f04f 0300 	mov.w	r3, #0
 800477e:	f04f 0400 	mov.w	r4, #0
 8004782:	0094      	lsls	r4, r2, #2
 8004784:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004788:	008b      	lsls	r3, r1, #2
 800478a:	461a      	mov	r2, r3
 800478c:	4623      	mov	r3, r4
 800478e:	4628      	mov	r0, r5
 8004790:	4631      	mov	r1, r6
 8004792:	f7fc f983 	bl	8000a9c <__aeabi_uldivmod>
 8004796:	4603      	mov	r3, r0
 8004798:	460c      	mov	r4, r1
 800479a:	461a      	mov	r2, r3
 800479c:	4bb8      	ldr	r3, [pc, #736]	; (8004a80 <UART_SetConfig+0x6f4>)
 800479e:	fba3 2302 	umull	r2, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	469b      	mov	fp, r3
 80047ac:	f04f 0c00 	mov.w	ip, #0
 80047b0:	46d9      	mov	r9, fp
 80047b2:	46e2      	mov	sl, ip
 80047b4:	eb19 0309 	adds.w	r3, r9, r9
 80047b8:	eb4a 040a 	adc.w	r4, sl, sl
 80047bc:	4699      	mov	r9, r3
 80047be:	46a2      	mov	sl, r4
 80047c0:	eb19 090b 	adds.w	r9, r9, fp
 80047c4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80047c8:	f04f 0100 	mov.w	r1, #0
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047d4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80047d8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80047dc:	4689      	mov	r9, r1
 80047de:	4692      	mov	sl, r2
 80047e0:	eb1b 0509 	adds.w	r5, fp, r9
 80047e4:	eb4c 060a 	adc.w	r6, ip, sl
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	4619      	mov	r1, r3
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	f04f 0400 	mov.w	r4, #0
 80047fa:	0094      	lsls	r4, r2, #2
 80047fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004800:	008b      	lsls	r3, r1, #2
 8004802:	461a      	mov	r2, r3
 8004804:	4623      	mov	r3, r4
 8004806:	4628      	mov	r0, r5
 8004808:	4631      	mov	r1, r6
 800480a:	f7fc f947 	bl	8000a9c <__aeabi_uldivmod>
 800480e:	4603      	mov	r3, r0
 8004810:	460c      	mov	r4, r1
 8004812:	461a      	mov	r2, r3
 8004814:	4b9a      	ldr	r3, [pc, #616]	; (8004a80 <UART_SetConfig+0x6f4>)
 8004816:	fba3 1302 	umull	r1, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	2164      	movs	r1, #100	; 0x64
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	1ad3      	subs	r3, r2, r3
 8004824:	011b      	lsls	r3, r3, #4
 8004826:	3332      	adds	r3, #50	; 0x32
 8004828:	4a95      	ldr	r2, [pc, #596]	; (8004a80 <UART_SetConfig+0x6f4>)
 800482a:	fba2 2303 	umull	r2, r3, r2, r3
 800482e:	095b      	lsrs	r3, r3, #5
 8004830:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004834:	4498      	add	r8, r3
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	469b      	mov	fp, r3
 800483a:	f04f 0c00 	mov.w	ip, #0
 800483e:	46d9      	mov	r9, fp
 8004840:	46e2      	mov	sl, ip
 8004842:	eb19 0309 	adds.w	r3, r9, r9
 8004846:	eb4a 040a 	adc.w	r4, sl, sl
 800484a:	4699      	mov	r9, r3
 800484c:	46a2      	mov	sl, r4
 800484e:	eb19 090b 	adds.w	r9, r9, fp
 8004852:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004856:	f04f 0100 	mov.w	r1, #0
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004862:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004866:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800486a:	4689      	mov	r9, r1
 800486c:	4692      	mov	sl, r2
 800486e:	eb1b 0509 	adds.w	r5, fp, r9
 8004872:	eb4c 060a 	adc.w	r6, ip, sl
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	4619      	mov	r1, r3
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	f04f 0400 	mov.w	r4, #0
 8004888:	0094      	lsls	r4, r2, #2
 800488a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800488e:	008b      	lsls	r3, r1, #2
 8004890:	461a      	mov	r2, r3
 8004892:	4623      	mov	r3, r4
 8004894:	4628      	mov	r0, r5
 8004896:	4631      	mov	r1, r6
 8004898:	f7fc f900 	bl	8000a9c <__aeabi_uldivmod>
 800489c:	4603      	mov	r3, r0
 800489e:	460c      	mov	r4, r1
 80048a0:	461a      	mov	r2, r3
 80048a2:	4b77      	ldr	r3, [pc, #476]	; (8004a80 <UART_SetConfig+0x6f4>)
 80048a4:	fba3 1302 	umull	r1, r3, r3, r2
 80048a8:	095b      	lsrs	r3, r3, #5
 80048aa:	2164      	movs	r1, #100	; 0x64
 80048ac:	fb01 f303 	mul.w	r3, r1, r3
 80048b0:	1ad3      	subs	r3, r2, r3
 80048b2:	011b      	lsls	r3, r3, #4
 80048b4:	3332      	adds	r3, #50	; 0x32
 80048b6:	4a72      	ldr	r2, [pc, #456]	; (8004a80 <UART_SetConfig+0x6f4>)
 80048b8:	fba2 2303 	umull	r2, r3, r2, r3
 80048bc:	095b      	lsrs	r3, r3, #5
 80048be:	f003 020f 	and.w	r2, r3, #15
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4442      	add	r2, r8
 80048c8:	609a      	str	r2, [r3, #8]
 80048ca:	e0d0      	b.n	8004a6e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80048cc:	f7fe f8e4 	bl	8002a98 <HAL_RCC_GetPCLK1Freq>
 80048d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	469a      	mov	sl, r3
 80048d6:	f04f 0b00 	mov.w	fp, #0
 80048da:	46d0      	mov	r8, sl
 80048dc:	46d9      	mov	r9, fp
 80048de:	eb18 0308 	adds.w	r3, r8, r8
 80048e2:	eb49 0409 	adc.w	r4, r9, r9
 80048e6:	4698      	mov	r8, r3
 80048e8:	46a1      	mov	r9, r4
 80048ea:	eb18 080a 	adds.w	r8, r8, sl
 80048ee:	eb49 090b 	adc.w	r9, r9, fp
 80048f2:	f04f 0100 	mov.w	r1, #0
 80048f6:	f04f 0200 	mov.w	r2, #0
 80048fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80048fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004902:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004906:	4688      	mov	r8, r1
 8004908:	4691      	mov	r9, r2
 800490a:	eb1a 0508 	adds.w	r5, sl, r8
 800490e:	eb4b 0609 	adc.w	r6, fp, r9
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	4619      	mov	r1, r3
 8004918:	f04f 0200 	mov.w	r2, #0
 800491c:	f04f 0300 	mov.w	r3, #0
 8004920:	f04f 0400 	mov.w	r4, #0
 8004924:	0094      	lsls	r4, r2, #2
 8004926:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800492a:	008b      	lsls	r3, r1, #2
 800492c:	461a      	mov	r2, r3
 800492e:	4623      	mov	r3, r4
 8004930:	4628      	mov	r0, r5
 8004932:	4631      	mov	r1, r6
 8004934:	f7fc f8b2 	bl	8000a9c <__aeabi_uldivmod>
 8004938:	4603      	mov	r3, r0
 800493a:	460c      	mov	r4, r1
 800493c:	461a      	mov	r2, r3
 800493e:	4b50      	ldr	r3, [pc, #320]	; (8004a80 <UART_SetConfig+0x6f4>)
 8004940:	fba3 2302 	umull	r2, r3, r3, r2
 8004944:	095b      	lsrs	r3, r3, #5
 8004946:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	469b      	mov	fp, r3
 800494e:	f04f 0c00 	mov.w	ip, #0
 8004952:	46d9      	mov	r9, fp
 8004954:	46e2      	mov	sl, ip
 8004956:	eb19 0309 	adds.w	r3, r9, r9
 800495a:	eb4a 040a 	adc.w	r4, sl, sl
 800495e:	4699      	mov	r9, r3
 8004960:	46a2      	mov	sl, r4
 8004962:	eb19 090b 	adds.w	r9, r9, fp
 8004966:	eb4a 0a0c 	adc.w	sl, sl, ip
 800496a:	f04f 0100 	mov.w	r1, #0
 800496e:	f04f 0200 	mov.w	r2, #0
 8004972:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004976:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800497a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800497e:	4689      	mov	r9, r1
 8004980:	4692      	mov	sl, r2
 8004982:	eb1b 0509 	adds.w	r5, fp, r9
 8004986:	eb4c 060a 	adc.w	r6, ip, sl
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4619      	mov	r1, r3
 8004990:	f04f 0200 	mov.w	r2, #0
 8004994:	f04f 0300 	mov.w	r3, #0
 8004998:	f04f 0400 	mov.w	r4, #0
 800499c:	0094      	lsls	r4, r2, #2
 800499e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80049a2:	008b      	lsls	r3, r1, #2
 80049a4:	461a      	mov	r2, r3
 80049a6:	4623      	mov	r3, r4
 80049a8:	4628      	mov	r0, r5
 80049aa:	4631      	mov	r1, r6
 80049ac:	f7fc f876 	bl	8000a9c <__aeabi_uldivmod>
 80049b0:	4603      	mov	r3, r0
 80049b2:	460c      	mov	r4, r1
 80049b4:	461a      	mov	r2, r3
 80049b6:	4b32      	ldr	r3, [pc, #200]	; (8004a80 <UART_SetConfig+0x6f4>)
 80049b8:	fba3 1302 	umull	r1, r3, r3, r2
 80049bc:	095b      	lsrs	r3, r3, #5
 80049be:	2164      	movs	r1, #100	; 0x64
 80049c0:	fb01 f303 	mul.w	r3, r1, r3
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	011b      	lsls	r3, r3, #4
 80049c8:	3332      	adds	r3, #50	; 0x32
 80049ca:	4a2d      	ldr	r2, [pc, #180]	; (8004a80 <UART_SetConfig+0x6f4>)
 80049cc:	fba2 2303 	umull	r2, r3, r2, r3
 80049d0:	095b      	lsrs	r3, r3, #5
 80049d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049d6:	4498      	add	r8, r3
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	469b      	mov	fp, r3
 80049dc:	f04f 0c00 	mov.w	ip, #0
 80049e0:	46d9      	mov	r9, fp
 80049e2:	46e2      	mov	sl, ip
 80049e4:	eb19 0309 	adds.w	r3, r9, r9
 80049e8:	eb4a 040a 	adc.w	r4, sl, sl
 80049ec:	4699      	mov	r9, r3
 80049ee:	46a2      	mov	sl, r4
 80049f0:	eb19 090b 	adds.w	r9, r9, fp
 80049f4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80049f8:	f04f 0100 	mov.w	r1, #0
 80049fc:	f04f 0200 	mov.w	r2, #0
 8004a00:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a04:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004a08:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004a0c:	4689      	mov	r9, r1
 8004a0e:	4692      	mov	sl, r2
 8004a10:	eb1b 0509 	adds.w	r5, fp, r9
 8004a14:	eb4c 060a 	adc.w	r6, ip, sl
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	f04f 0200 	mov.w	r2, #0
 8004a22:	f04f 0300 	mov.w	r3, #0
 8004a26:	f04f 0400 	mov.w	r4, #0
 8004a2a:	0094      	lsls	r4, r2, #2
 8004a2c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004a30:	008b      	lsls	r3, r1, #2
 8004a32:	461a      	mov	r2, r3
 8004a34:	4623      	mov	r3, r4
 8004a36:	4628      	mov	r0, r5
 8004a38:	4631      	mov	r1, r6
 8004a3a:	f7fc f82f 	bl	8000a9c <__aeabi_uldivmod>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	460c      	mov	r4, r1
 8004a42:	461a      	mov	r2, r3
 8004a44:	4b0e      	ldr	r3, [pc, #56]	; (8004a80 <UART_SetConfig+0x6f4>)
 8004a46:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4a:	095b      	lsrs	r3, r3, #5
 8004a4c:	2164      	movs	r1, #100	; 0x64
 8004a4e:	fb01 f303 	mul.w	r3, r1, r3
 8004a52:	1ad3      	subs	r3, r2, r3
 8004a54:	011b      	lsls	r3, r3, #4
 8004a56:	3332      	adds	r3, #50	; 0x32
 8004a58:	4a09      	ldr	r2, [pc, #36]	; (8004a80 <UART_SetConfig+0x6f4>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	095b      	lsrs	r3, r3, #5
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4442      	add	r2, r8
 8004a6a:	609a      	str	r2, [r3, #8]
}
 8004a6c:	e7ff      	b.n	8004a6e <UART_SetConfig+0x6e2>
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a78:	40011000 	.word	0x40011000
 8004a7c:	40011400 	.word	0x40011400
 8004a80:	51eb851f 	.word	0x51eb851f

08004a84 <__errno>:
 8004a84:	4b01      	ldr	r3, [pc, #4]	; (8004a8c <__errno+0x8>)
 8004a86:	6818      	ldr	r0, [r3, #0]
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	2000000c 	.word	0x2000000c

08004a90 <__libc_init_array>:
 8004a90:	b570      	push	{r4, r5, r6, lr}
 8004a92:	4e0d      	ldr	r6, [pc, #52]	; (8004ac8 <__libc_init_array+0x38>)
 8004a94:	4c0d      	ldr	r4, [pc, #52]	; (8004acc <__libc_init_array+0x3c>)
 8004a96:	1ba4      	subs	r4, r4, r6
 8004a98:	10a4      	asrs	r4, r4, #2
 8004a9a:	2500      	movs	r5, #0
 8004a9c:	42a5      	cmp	r5, r4
 8004a9e:	d109      	bne.n	8004ab4 <__libc_init_array+0x24>
 8004aa0:	4e0b      	ldr	r6, [pc, #44]	; (8004ad0 <__libc_init_array+0x40>)
 8004aa2:	4c0c      	ldr	r4, [pc, #48]	; (8004ad4 <__libc_init_array+0x44>)
 8004aa4:	f000 fc46 	bl	8005334 <_init>
 8004aa8:	1ba4      	subs	r4, r4, r6
 8004aaa:	10a4      	asrs	r4, r4, #2
 8004aac:	2500      	movs	r5, #0
 8004aae:	42a5      	cmp	r5, r4
 8004ab0:	d105      	bne.n	8004abe <__libc_init_array+0x2e>
 8004ab2:	bd70      	pop	{r4, r5, r6, pc}
 8004ab4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ab8:	4798      	blx	r3
 8004aba:	3501      	adds	r5, #1
 8004abc:	e7ee      	b.n	8004a9c <__libc_init_array+0xc>
 8004abe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ac2:	4798      	blx	r3
 8004ac4:	3501      	adds	r5, #1
 8004ac6:	e7f2      	b.n	8004aae <__libc_init_array+0x1e>
 8004ac8:	080053c4 	.word	0x080053c4
 8004acc:	080053c4 	.word	0x080053c4
 8004ad0:	080053c4 	.word	0x080053c4
 8004ad4:	080053c8 	.word	0x080053c8

08004ad8 <malloc>:
 8004ad8:	4b02      	ldr	r3, [pc, #8]	; (8004ae4 <malloc+0xc>)
 8004ada:	4601      	mov	r1, r0
 8004adc:	6818      	ldr	r0, [r3, #0]
 8004ade:	f000 b859 	b.w	8004b94 <_malloc_r>
 8004ae2:	bf00      	nop
 8004ae4:	2000000c 	.word	0x2000000c

08004ae8 <memset>:
 8004ae8:	4402      	add	r2, r0
 8004aea:	4603      	mov	r3, r0
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d100      	bne.n	8004af2 <memset+0xa>
 8004af0:	4770      	bx	lr
 8004af2:	f803 1b01 	strb.w	r1, [r3], #1
 8004af6:	e7f9      	b.n	8004aec <memset+0x4>

08004af8 <_free_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4605      	mov	r5, r0
 8004afc:	2900      	cmp	r1, #0
 8004afe:	d045      	beq.n	8004b8c <_free_r+0x94>
 8004b00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b04:	1f0c      	subs	r4, r1, #4
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	bfb8      	it	lt
 8004b0a:	18e4      	addlt	r4, r4, r3
 8004b0c:	f000 f8e3 	bl	8004cd6 <__malloc_lock>
 8004b10:	4a1f      	ldr	r2, [pc, #124]	; (8004b90 <_free_r+0x98>)
 8004b12:	6813      	ldr	r3, [r2, #0]
 8004b14:	4610      	mov	r0, r2
 8004b16:	b933      	cbnz	r3, 8004b26 <_free_r+0x2e>
 8004b18:	6063      	str	r3, [r4, #4]
 8004b1a:	6014      	str	r4, [r2, #0]
 8004b1c:	4628      	mov	r0, r5
 8004b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b22:	f000 b8d9 	b.w	8004cd8 <__malloc_unlock>
 8004b26:	42a3      	cmp	r3, r4
 8004b28:	d90c      	bls.n	8004b44 <_free_r+0x4c>
 8004b2a:	6821      	ldr	r1, [r4, #0]
 8004b2c:	1862      	adds	r2, r4, r1
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	bf04      	itt	eq
 8004b32:	681a      	ldreq	r2, [r3, #0]
 8004b34:	685b      	ldreq	r3, [r3, #4]
 8004b36:	6063      	str	r3, [r4, #4]
 8004b38:	bf04      	itt	eq
 8004b3a:	1852      	addeq	r2, r2, r1
 8004b3c:	6022      	streq	r2, [r4, #0]
 8004b3e:	6004      	str	r4, [r0, #0]
 8004b40:	e7ec      	b.n	8004b1c <_free_r+0x24>
 8004b42:	4613      	mov	r3, r2
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	b10a      	cbz	r2, 8004b4c <_free_r+0x54>
 8004b48:	42a2      	cmp	r2, r4
 8004b4a:	d9fa      	bls.n	8004b42 <_free_r+0x4a>
 8004b4c:	6819      	ldr	r1, [r3, #0]
 8004b4e:	1858      	adds	r0, r3, r1
 8004b50:	42a0      	cmp	r0, r4
 8004b52:	d10b      	bne.n	8004b6c <_free_r+0x74>
 8004b54:	6820      	ldr	r0, [r4, #0]
 8004b56:	4401      	add	r1, r0
 8004b58:	1858      	adds	r0, r3, r1
 8004b5a:	4282      	cmp	r2, r0
 8004b5c:	6019      	str	r1, [r3, #0]
 8004b5e:	d1dd      	bne.n	8004b1c <_free_r+0x24>
 8004b60:	6810      	ldr	r0, [r2, #0]
 8004b62:	6852      	ldr	r2, [r2, #4]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	4401      	add	r1, r0
 8004b68:	6019      	str	r1, [r3, #0]
 8004b6a:	e7d7      	b.n	8004b1c <_free_r+0x24>
 8004b6c:	d902      	bls.n	8004b74 <_free_r+0x7c>
 8004b6e:	230c      	movs	r3, #12
 8004b70:	602b      	str	r3, [r5, #0]
 8004b72:	e7d3      	b.n	8004b1c <_free_r+0x24>
 8004b74:	6820      	ldr	r0, [r4, #0]
 8004b76:	1821      	adds	r1, r4, r0
 8004b78:	428a      	cmp	r2, r1
 8004b7a:	bf04      	itt	eq
 8004b7c:	6811      	ldreq	r1, [r2, #0]
 8004b7e:	6852      	ldreq	r2, [r2, #4]
 8004b80:	6062      	str	r2, [r4, #4]
 8004b82:	bf04      	itt	eq
 8004b84:	1809      	addeq	r1, r1, r0
 8004b86:	6021      	streq	r1, [r4, #0]
 8004b88:	605c      	str	r4, [r3, #4]
 8004b8a:	e7c7      	b.n	8004b1c <_free_r+0x24>
 8004b8c:	bd38      	pop	{r3, r4, r5, pc}
 8004b8e:	bf00      	nop
 8004b90:	20000090 	.word	0x20000090

08004b94 <_malloc_r>:
 8004b94:	b570      	push	{r4, r5, r6, lr}
 8004b96:	1ccd      	adds	r5, r1, #3
 8004b98:	f025 0503 	bic.w	r5, r5, #3
 8004b9c:	3508      	adds	r5, #8
 8004b9e:	2d0c      	cmp	r5, #12
 8004ba0:	bf38      	it	cc
 8004ba2:	250c      	movcc	r5, #12
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	4606      	mov	r6, r0
 8004ba8:	db01      	blt.n	8004bae <_malloc_r+0x1a>
 8004baa:	42a9      	cmp	r1, r5
 8004bac:	d903      	bls.n	8004bb6 <_malloc_r+0x22>
 8004bae:	230c      	movs	r3, #12
 8004bb0:	6033      	str	r3, [r6, #0]
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	bd70      	pop	{r4, r5, r6, pc}
 8004bb6:	f000 f88e 	bl	8004cd6 <__malloc_lock>
 8004bba:	4a21      	ldr	r2, [pc, #132]	; (8004c40 <_malloc_r+0xac>)
 8004bbc:	6814      	ldr	r4, [r2, #0]
 8004bbe:	4621      	mov	r1, r4
 8004bc0:	b991      	cbnz	r1, 8004be8 <_malloc_r+0x54>
 8004bc2:	4c20      	ldr	r4, [pc, #128]	; (8004c44 <_malloc_r+0xb0>)
 8004bc4:	6823      	ldr	r3, [r4, #0]
 8004bc6:	b91b      	cbnz	r3, 8004bd0 <_malloc_r+0x3c>
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 f83d 	bl	8004c48 <_sbrk_r>
 8004bce:	6020      	str	r0, [r4, #0]
 8004bd0:	4629      	mov	r1, r5
 8004bd2:	4630      	mov	r0, r6
 8004bd4:	f000 f838 	bl	8004c48 <_sbrk_r>
 8004bd8:	1c43      	adds	r3, r0, #1
 8004bda:	d124      	bne.n	8004c26 <_malloc_r+0x92>
 8004bdc:	230c      	movs	r3, #12
 8004bde:	6033      	str	r3, [r6, #0]
 8004be0:	4630      	mov	r0, r6
 8004be2:	f000 f879 	bl	8004cd8 <__malloc_unlock>
 8004be6:	e7e4      	b.n	8004bb2 <_malloc_r+0x1e>
 8004be8:	680b      	ldr	r3, [r1, #0]
 8004bea:	1b5b      	subs	r3, r3, r5
 8004bec:	d418      	bmi.n	8004c20 <_malloc_r+0x8c>
 8004bee:	2b0b      	cmp	r3, #11
 8004bf0:	d90f      	bls.n	8004c12 <_malloc_r+0x7e>
 8004bf2:	600b      	str	r3, [r1, #0]
 8004bf4:	50cd      	str	r5, [r1, r3]
 8004bf6:	18cc      	adds	r4, r1, r3
 8004bf8:	4630      	mov	r0, r6
 8004bfa:	f000 f86d 	bl	8004cd8 <__malloc_unlock>
 8004bfe:	f104 000b 	add.w	r0, r4, #11
 8004c02:	1d23      	adds	r3, r4, #4
 8004c04:	f020 0007 	bic.w	r0, r0, #7
 8004c08:	1ac3      	subs	r3, r0, r3
 8004c0a:	d0d3      	beq.n	8004bb4 <_malloc_r+0x20>
 8004c0c:	425a      	negs	r2, r3
 8004c0e:	50e2      	str	r2, [r4, r3]
 8004c10:	e7d0      	b.n	8004bb4 <_malloc_r+0x20>
 8004c12:	428c      	cmp	r4, r1
 8004c14:	684b      	ldr	r3, [r1, #4]
 8004c16:	bf16      	itet	ne
 8004c18:	6063      	strne	r3, [r4, #4]
 8004c1a:	6013      	streq	r3, [r2, #0]
 8004c1c:	460c      	movne	r4, r1
 8004c1e:	e7eb      	b.n	8004bf8 <_malloc_r+0x64>
 8004c20:	460c      	mov	r4, r1
 8004c22:	6849      	ldr	r1, [r1, #4]
 8004c24:	e7cc      	b.n	8004bc0 <_malloc_r+0x2c>
 8004c26:	1cc4      	adds	r4, r0, #3
 8004c28:	f024 0403 	bic.w	r4, r4, #3
 8004c2c:	42a0      	cmp	r0, r4
 8004c2e:	d005      	beq.n	8004c3c <_malloc_r+0xa8>
 8004c30:	1a21      	subs	r1, r4, r0
 8004c32:	4630      	mov	r0, r6
 8004c34:	f000 f808 	bl	8004c48 <_sbrk_r>
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d0cf      	beq.n	8004bdc <_malloc_r+0x48>
 8004c3c:	6025      	str	r5, [r4, #0]
 8004c3e:	e7db      	b.n	8004bf8 <_malloc_r+0x64>
 8004c40:	20000090 	.word	0x20000090
 8004c44:	20000094 	.word	0x20000094

08004c48 <_sbrk_r>:
 8004c48:	b538      	push	{r3, r4, r5, lr}
 8004c4a:	4c06      	ldr	r4, [pc, #24]	; (8004c64 <_sbrk_r+0x1c>)
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	4605      	mov	r5, r0
 8004c50:	4608      	mov	r0, r1
 8004c52:	6023      	str	r3, [r4, #0]
 8004c54:	f7fc fe18 	bl	8001888 <_sbrk>
 8004c58:	1c43      	adds	r3, r0, #1
 8004c5a:	d102      	bne.n	8004c62 <_sbrk_r+0x1a>
 8004c5c:	6823      	ldr	r3, [r4, #0]
 8004c5e:	b103      	cbz	r3, 8004c62 <_sbrk_r+0x1a>
 8004c60:	602b      	str	r3, [r5, #0]
 8004c62:	bd38      	pop	{r3, r4, r5, pc}
 8004c64:	200001bc 	.word	0x200001bc

08004c68 <siprintf>:
 8004c68:	b40e      	push	{r1, r2, r3}
 8004c6a:	b500      	push	{lr}
 8004c6c:	b09c      	sub	sp, #112	; 0x70
 8004c6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004c70:	9002      	str	r0, [sp, #8]
 8004c72:	9006      	str	r0, [sp, #24]
 8004c74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004c78:	4809      	ldr	r0, [pc, #36]	; (8004ca0 <siprintf+0x38>)
 8004c7a:	9107      	str	r1, [sp, #28]
 8004c7c:	9104      	str	r1, [sp, #16]
 8004c7e:	4909      	ldr	r1, [pc, #36]	; (8004ca4 <siprintf+0x3c>)
 8004c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c84:	9105      	str	r1, [sp, #20]
 8004c86:	6800      	ldr	r0, [r0, #0]
 8004c88:	9301      	str	r3, [sp, #4]
 8004c8a:	a902      	add	r1, sp, #8
 8004c8c:	f000 f880 	bl	8004d90 <_svfiprintf_r>
 8004c90:	9b02      	ldr	r3, [sp, #8]
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
 8004c96:	b01c      	add	sp, #112	; 0x70
 8004c98:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c9c:	b003      	add	sp, #12
 8004c9e:	4770      	bx	lr
 8004ca0:	2000000c 	.word	0x2000000c
 8004ca4:	ffff0208 	.word	0xffff0208

08004ca8 <strcat>:
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	4603      	mov	r3, r0
 8004cac:	781a      	ldrb	r2, [r3, #0]
 8004cae:	1c5c      	adds	r4, r3, #1
 8004cb0:	b93a      	cbnz	r2, 8004cc2 <strcat+0x1a>
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cb8:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	d1f9      	bne.n	8004cb4 <strcat+0xc>
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	4623      	mov	r3, r4
 8004cc4:	e7f2      	b.n	8004cac <strcat+0x4>

08004cc6 <strcpy>:
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ccc:	f803 2b01 	strb.w	r2, [r3], #1
 8004cd0:	2a00      	cmp	r2, #0
 8004cd2:	d1f9      	bne.n	8004cc8 <strcpy+0x2>
 8004cd4:	4770      	bx	lr

08004cd6 <__malloc_lock>:
 8004cd6:	4770      	bx	lr

08004cd8 <__malloc_unlock>:
 8004cd8:	4770      	bx	lr

08004cda <__ssputs_r>:
 8004cda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004cde:	688e      	ldr	r6, [r1, #8]
 8004ce0:	429e      	cmp	r6, r3
 8004ce2:	4682      	mov	sl, r0
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	4690      	mov	r8, r2
 8004ce8:	4699      	mov	r9, r3
 8004cea:	d837      	bhi.n	8004d5c <__ssputs_r+0x82>
 8004cec:	898a      	ldrh	r2, [r1, #12]
 8004cee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004cf2:	d031      	beq.n	8004d58 <__ssputs_r+0x7e>
 8004cf4:	6825      	ldr	r5, [r4, #0]
 8004cf6:	6909      	ldr	r1, [r1, #16]
 8004cf8:	1a6f      	subs	r7, r5, r1
 8004cfa:	6965      	ldr	r5, [r4, #20]
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d02:	fb95 f5f3 	sdiv	r5, r5, r3
 8004d06:	f109 0301 	add.w	r3, r9, #1
 8004d0a:	443b      	add	r3, r7
 8004d0c:	429d      	cmp	r5, r3
 8004d0e:	bf38      	it	cc
 8004d10:	461d      	movcc	r5, r3
 8004d12:	0553      	lsls	r3, r2, #21
 8004d14:	d530      	bpl.n	8004d78 <__ssputs_r+0x9e>
 8004d16:	4629      	mov	r1, r5
 8004d18:	f7ff ff3c 	bl	8004b94 <_malloc_r>
 8004d1c:	4606      	mov	r6, r0
 8004d1e:	b950      	cbnz	r0, 8004d36 <__ssputs_r+0x5c>
 8004d20:	230c      	movs	r3, #12
 8004d22:	f8ca 3000 	str.w	r3, [sl]
 8004d26:	89a3      	ldrh	r3, [r4, #12]
 8004d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d2c:	81a3      	strh	r3, [r4, #12]
 8004d2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d36:	463a      	mov	r2, r7
 8004d38:	6921      	ldr	r1, [r4, #16]
 8004d3a:	f000 faa9 	bl	8005290 <memcpy>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004d44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d48:	81a3      	strh	r3, [r4, #12]
 8004d4a:	6126      	str	r6, [r4, #16]
 8004d4c:	6165      	str	r5, [r4, #20]
 8004d4e:	443e      	add	r6, r7
 8004d50:	1bed      	subs	r5, r5, r7
 8004d52:	6026      	str	r6, [r4, #0]
 8004d54:	60a5      	str	r5, [r4, #8]
 8004d56:	464e      	mov	r6, r9
 8004d58:	454e      	cmp	r6, r9
 8004d5a:	d900      	bls.n	8004d5e <__ssputs_r+0x84>
 8004d5c:	464e      	mov	r6, r9
 8004d5e:	4632      	mov	r2, r6
 8004d60:	4641      	mov	r1, r8
 8004d62:	6820      	ldr	r0, [r4, #0]
 8004d64:	f000 fa9f 	bl	80052a6 <memmove>
 8004d68:	68a3      	ldr	r3, [r4, #8]
 8004d6a:	1b9b      	subs	r3, r3, r6
 8004d6c:	60a3      	str	r3, [r4, #8]
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	441e      	add	r6, r3
 8004d72:	6026      	str	r6, [r4, #0]
 8004d74:	2000      	movs	r0, #0
 8004d76:	e7dc      	b.n	8004d32 <__ssputs_r+0x58>
 8004d78:	462a      	mov	r2, r5
 8004d7a:	f000 faad 	bl	80052d8 <_realloc_r>
 8004d7e:	4606      	mov	r6, r0
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d1e2      	bne.n	8004d4a <__ssputs_r+0x70>
 8004d84:	6921      	ldr	r1, [r4, #16]
 8004d86:	4650      	mov	r0, sl
 8004d88:	f7ff feb6 	bl	8004af8 <_free_r>
 8004d8c:	e7c8      	b.n	8004d20 <__ssputs_r+0x46>
	...

08004d90 <_svfiprintf_r>:
 8004d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d94:	461d      	mov	r5, r3
 8004d96:	898b      	ldrh	r3, [r1, #12]
 8004d98:	061f      	lsls	r7, r3, #24
 8004d9a:	b09d      	sub	sp, #116	; 0x74
 8004d9c:	4680      	mov	r8, r0
 8004d9e:	460c      	mov	r4, r1
 8004da0:	4616      	mov	r6, r2
 8004da2:	d50f      	bpl.n	8004dc4 <_svfiprintf_r+0x34>
 8004da4:	690b      	ldr	r3, [r1, #16]
 8004da6:	b96b      	cbnz	r3, 8004dc4 <_svfiprintf_r+0x34>
 8004da8:	2140      	movs	r1, #64	; 0x40
 8004daa:	f7ff fef3 	bl	8004b94 <_malloc_r>
 8004dae:	6020      	str	r0, [r4, #0]
 8004db0:	6120      	str	r0, [r4, #16]
 8004db2:	b928      	cbnz	r0, 8004dc0 <_svfiprintf_r+0x30>
 8004db4:	230c      	movs	r3, #12
 8004db6:	f8c8 3000 	str.w	r3, [r8]
 8004dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dbe:	e0c8      	b.n	8004f52 <_svfiprintf_r+0x1c2>
 8004dc0:	2340      	movs	r3, #64	; 0x40
 8004dc2:	6163      	str	r3, [r4, #20]
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8004dc8:	2320      	movs	r3, #32
 8004dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004dce:	2330      	movs	r3, #48	; 0x30
 8004dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004dd4:	9503      	str	r5, [sp, #12]
 8004dd6:	f04f 0b01 	mov.w	fp, #1
 8004dda:	4637      	mov	r7, r6
 8004ddc:	463d      	mov	r5, r7
 8004dde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004de2:	b10b      	cbz	r3, 8004de8 <_svfiprintf_r+0x58>
 8004de4:	2b25      	cmp	r3, #37	; 0x25
 8004de6:	d13e      	bne.n	8004e66 <_svfiprintf_r+0xd6>
 8004de8:	ebb7 0a06 	subs.w	sl, r7, r6
 8004dec:	d00b      	beq.n	8004e06 <_svfiprintf_r+0x76>
 8004dee:	4653      	mov	r3, sl
 8004df0:	4632      	mov	r2, r6
 8004df2:	4621      	mov	r1, r4
 8004df4:	4640      	mov	r0, r8
 8004df6:	f7ff ff70 	bl	8004cda <__ssputs_r>
 8004dfa:	3001      	adds	r0, #1
 8004dfc:	f000 80a4 	beq.w	8004f48 <_svfiprintf_r+0x1b8>
 8004e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e02:	4453      	add	r3, sl
 8004e04:	9309      	str	r3, [sp, #36]	; 0x24
 8004e06:	783b      	ldrb	r3, [r7, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	f000 809d 	beq.w	8004f48 <_svfiprintf_r+0x1b8>
 8004e0e:	2300      	movs	r3, #0
 8004e10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e18:	9304      	str	r3, [sp, #16]
 8004e1a:	9307      	str	r3, [sp, #28]
 8004e1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004e20:	931a      	str	r3, [sp, #104]	; 0x68
 8004e22:	462f      	mov	r7, r5
 8004e24:	2205      	movs	r2, #5
 8004e26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004e2a:	4850      	ldr	r0, [pc, #320]	; (8004f6c <_svfiprintf_r+0x1dc>)
 8004e2c:	f7fb f9f8 	bl	8000220 <memchr>
 8004e30:	9b04      	ldr	r3, [sp, #16]
 8004e32:	b9d0      	cbnz	r0, 8004e6a <_svfiprintf_r+0xda>
 8004e34:	06d9      	lsls	r1, r3, #27
 8004e36:	bf44      	itt	mi
 8004e38:	2220      	movmi	r2, #32
 8004e3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e3e:	071a      	lsls	r2, r3, #28
 8004e40:	bf44      	itt	mi
 8004e42:	222b      	movmi	r2, #43	; 0x2b
 8004e44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004e48:	782a      	ldrb	r2, [r5, #0]
 8004e4a:	2a2a      	cmp	r2, #42	; 0x2a
 8004e4c:	d015      	beq.n	8004e7a <_svfiprintf_r+0xea>
 8004e4e:	9a07      	ldr	r2, [sp, #28]
 8004e50:	462f      	mov	r7, r5
 8004e52:	2000      	movs	r0, #0
 8004e54:	250a      	movs	r5, #10
 8004e56:	4639      	mov	r1, r7
 8004e58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e5c:	3b30      	subs	r3, #48	; 0x30
 8004e5e:	2b09      	cmp	r3, #9
 8004e60:	d94d      	bls.n	8004efe <_svfiprintf_r+0x16e>
 8004e62:	b1b8      	cbz	r0, 8004e94 <_svfiprintf_r+0x104>
 8004e64:	e00f      	b.n	8004e86 <_svfiprintf_r+0xf6>
 8004e66:	462f      	mov	r7, r5
 8004e68:	e7b8      	b.n	8004ddc <_svfiprintf_r+0x4c>
 8004e6a:	4a40      	ldr	r2, [pc, #256]	; (8004f6c <_svfiprintf_r+0x1dc>)
 8004e6c:	1a80      	subs	r0, r0, r2
 8004e6e:	fa0b f000 	lsl.w	r0, fp, r0
 8004e72:	4318      	orrs	r0, r3
 8004e74:	9004      	str	r0, [sp, #16]
 8004e76:	463d      	mov	r5, r7
 8004e78:	e7d3      	b.n	8004e22 <_svfiprintf_r+0x92>
 8004e7a:	9a03      	ldr	r2, [sp, #12]
 8004e7c:	1d11      	adds	r1, r2, #4
 8004e7e:	6812      	ldr	r2, [r2, #0]
 8004e80:	9103      	str	r1, [sp, #12]
 8004e82:	2a00      	cmp	r2, #0
 8004e84:	db01      	blt.n	8004e8a <_svfiprintf_r+0xfa>
 8004e86:	9207      	str	r2, [sp, #28]
 8004e88:	e004      	b.n	8004e94 <_svfiprintf_r+0x104>
 8004e8a:	4252      	negs	r2, r2
 8004e8c:	f043 0302 	orr.w	r3, r3, #2
 8004e90:	9207      	str	r2, [sp, #28]
 8004e92:	9304      	str	r3, [sp, #16]
 8004e94:	783b      	ldrb	r3, [r7, #0]
 8004e96:	2b2e      	cmp	r3, #46	; 0x2e
 8004e98:	d10c      	bne.n	8004eb4 <_svfiprintf_r+0x124>
 8004e9a:	787b      	ldrb	r3, [r7, #1]
 8004e9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004e9e:	d133      	bne.n	8004f08 <_svfiprintf_r+0x178>
 8004ea0:	9b03      	ldr	r3, [sp, #12]
 8004ea2:	1d1a      	adds	r2, r3, #4
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	9203      	str	r2, [sp, #12]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bfb8      	it	lt
 8004eac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004eb0:	3702      	adds	r7, #2
 8004eb2:	9305      	str	r3, [sp, #20]
 8004eb4:	4d2e      	ldr	r5, [pc, #184]	; (8004f70 <_svfiprintf_r+0x1e0>)
 8004eb6:	7839      	ldrb	r1, [r7, #0]
 8004eb8:	2203      	movs	r2, #3
 8004eba:	4628      	mov	r0, r5
 8004ebc:	f7fb f9b0 	bl	8000220 <memchr>
 8004ec0:	b138      	cbz	r0, 8004ed2 <_svfiprintf_r+0x142>
 8004ec2:	2340      	movs	r3, #64	; 0x40
 8004ec4:	1b40      	subs	r0, r0, r5
 8004ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8004eca:	9b04      	ldr	r3, [sp, #16]
 8004ecc:	4303      	orrs	r3, r0
 8004ece:	3701      	adds	r7, #1
 8004ed0:	9304      	str	r3, [sp, #16]
 8004ed2:	7839      	ldrb	r1, [r7, #0]
 8004ed4:	4827      	ldr	r0, [pc, #156]	; (8004f74 <_svfiprintf_r+0x1e4>)
 8004ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004eda:	2206      	movs	r2, #6
 8004edc:	1c7e      	adds	r6, r7, #1
 8004ede:	f7fb f99f 	bl	8000220 <memchr>
 8004ee2:	2800      	cmp	r0, #0
 8004ee4:	d038      	beq.n	8004f58 <_svfiprintf_r+0x1c8>
 8004ee6:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <_svfiprintf_r+0x1e8>)
 8004ee8:	bb13      	cbnz	r3, 8004f30 <_svfiprintf_r+0x1a0>
 8004eea:	9b03      	ldr	r3, [sp, #12]
 8004eec:	3307      	adds	r3, #7
 8004eee:	f023 0307 	bic.w	r3, r3, #7
 8004ef2:	3308      	adds	r3, #8
 8004ef4:	9303      	str	r3, [sp, #12]
 8004ef6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ef8:	444b      	add	r3, r9
 8004efa:	9309      	str	r3, [sp, #36]	; 0x24
 8004efc:	e76d      	b.n	8004dda <_svfiprintf_r+0x4a>
 8004efe:	fb05 3202 	mla	r2, r5, r2, r3
 8004f02:	2001      	movs	r0, #1
 8004f04:	460f      	mov	r7, r1
 8004f06:	e7a6      	b.n	8004e56 <_svfiprintf_r+0xc6>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	3701      	adds	r7, #1
 8004f0c:	9305      	str	r3, [sp, #20]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	250a      	movs	r5, #10
 8004f12:	4638      	mov	r0, r7
 8004f14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f18:	3a30      	subs	r2, #48	; 0x30
 8004f1a:	2a09      	cmp	r2, #9
 8004f1c:	d903      	bls.n	8004f26 <_svfiprintf_r+0x196>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0c8      	beq.n	8004eb4 <_svfiprintf_r+0x124>
 8004f22:	9105      	str	r1, [sp, #20]
 8004f24:	e7c6      	b.n	8004eb4 <_svfiprintf_r+0x124>
 8004f26:	fb05 2101 	mla	r1, r5, r1, r2
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	e7f0      	b.n	8004f12 <_svfiprintf_r+0x182>
 8004f30:	ab03      	add	r3, sp, #12
 8004f32:	9300      	str	r3, [sp, #0]
 8004f34:	4622      	mov	r2, r4
 8004f36:	4b11      	ldr	r3, [pc, #68]	; (8004f7c <_svfiprintf_r+0x1ec>)
 8004f38:	a904      	add	r1, sp, #16
 8004f3a:	4640      	mov	r0, r8
 8004f3c:	f3af 8000 	nop.w
 8004f40:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8004f44:	4681      	mov	r9, r0
 8004f46:	d1d6      	bne.n	8004ef6 <_svfiprintf_r+0x166>
 8004f48:	89a3      	ldrh	r3, [r4, #12]
 8004f4a:	065b      	lsls	r3, r3, #25
 8004f4c:	f53f af35 	bmi.w	8004dba <_svfiprintf_r+0x2a>
 8004f50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004f52:	b01d      	add	sp, #116	; 0x74
 8004f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f58:	ab03      	add	r3, sp, #12
 8004f5a:	9300      	str	r3, [sp, #0]
 8004f5c:	4622      	mov	r2, r4
 8004f5e:	4b07      	ldr	r3, [pc, #28]	; (8004f7c <_svfiprintf_r+0x1ec>)
 8004f60:	a904      	add	r1, sp, #16
 8004f62:	4640      	mov	r0, r8
 8004f64:	f000 f882 	bl	800506c <_printf_i>
 8004f68:	e7ea      	b.n	8004f40 <_svfiprintf_r+0x1b0>
 8004f6a:	bf00      	nop
 8004f6c:	08005388 	.word	0x08005388
 8004f70:	0800538e 	.word	0x0800538e
 8004f74:	08005392 	.word	0x08005392
 8004f78:	00000000 	.word	0x00000000
 8004f7c:	08004cdb 	.word	0x08004cdb

08004f80 <_printf_common>:
 8004f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f84:	4691      	mov	r9, r2
 8004f86:	461f      	mov	r7, r3
 8004f88:	688a      	ldr	r2, [r1, #8]
 8004f8a:	690b      	ldr	r3, [r1, #16]
 8004f8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f90:	4293      	cmp	r3, r2
 8004f92:	bfb8      	it	lt
 8004f94:	4613      	movlt	r3, r2
 8004f96:	f8c9 3000 	str.w	r3, [r9]
 8004f9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	460c      	mov	r4, r1
 8004fa2:	b112      	cbz	r2, 8004faa <_printf_common+0x2a>
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	f8c9 3000 	str.w	r3, [r9]
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	0699      	lsls	r1, r3, #26
 8004fae:	bf42      	ittt	mi
 8004fb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004fb4:	3302      	addmi	r3, #2
 8004fb6:	f8c9 3000 	strmi.w	r3, [r9]
 8004fba:	6825      	ldr	r5, [r4, #0]
 8004fbc:	f015 0506 	ands.w	r5, r5, #6
 8004fc0:	d107      	bne.n	8004fd2 <_printf_common+0x52>
 8004fc2:	f104 0a19 	add.w	sl, r4, #25
 8004fc6:	68e3      	ldr	r3, [r4, #12]
 8004fc8:	f8d9 2000 	ldr.w	r2, [r9]
 8004fcc:	1a9b      	subs	r3, r3, r2
 8004fce:	42ab      	cmp	r3, r5
 8004fd0:	dc28      	bgt.n	8005024 <_printf_common+0xa4>
 8004fd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004fd6:	6822      	ldr	r2, [r4, #0]
 8004fd8:	3300      	adds	r3, #0
 8004fda:	bf18      	it	ne
 8004fdc:	2301      	movne	r3, #1
 8004fde:	0692      	lsls	r2, r2, #26
 8004fe0:	d42d      	bmi.n	800503e <_printf_common+0xbe>
 8004fe2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004fe6:	4639      	mov	r1, r7
 8004fe8:	4630      	mov	r0, r6
 8004fea:	47c0      	blx	r8
 8004fec:	3001      	adds	r0, #1
 8004fee:	d020      	beq.n	8005032 <_printf_common+0xb2>
 8004ff0:	6823      	ldr	r3, [r4, #0]
 8004ff2:	68e5      	ldr	r5, [r4, #12]
 8004ff4:	f8d9 2000 	ldr.w	r2, [r9]
 8004ff8:	f003 0306 	and.w	r3, r3, #6
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	bf08      	it	eq
 8005000:	1aad      	subeq	r5, r5, r2
 8005002:	68a3      	ldr	r3, [r4, #8]
 8005004:	6922      	ldr	r2, [r4, #16]
 8005006:	bf0c      	ite	eq
 8005008:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800500c:	2500      	movne	r5, #0
 800500e:	4293      	cmp	r3, r2
 8005010:	bfc4      	itt	gt
 8005012:	1a9b      	subgt	r3, r3, r2
 8005014:	18ed      	addgt	r5, r5, r3
 8005016:	f04f 0900 	mov.w	r9, #0
 800501a:	341a      	adds	r4, #26
 800501c:	454d      	cmp	r5, r9
 800501e:	d11a      	bne.n	8005056 <_printf_common+0xd6>
 8005020:	2000      	movs	r0, #0
 8005022:	e008      	b.n	8005036 <_printf_common+0xb6>
 8005024:	2301      	movs	r3, #1
 8005026:	4652      	mov	r2, sl
 8005028:	4639      	mov	r1, r7
 800502a:	4630      	mov	r0, r6
 800502c:	47c0      	blx	r8
 800502e:	3001      	adds	r0, #1
 8005030:	d103      	bne.n	800503a <_printf_common+0xba>
 8005032:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800503a:	3501      	adds	r5, #1
 800503c:	e7c3      	b.n	8004fc6 <_printf_common+0x46>
 800503e:	18e1      	adds	r1, r4, r3
 8005040:	1c5a      	adds	r2, r3, #1
 8005042:	2030      	movs	r0, #48	; 0x30
 8005044:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005048:	4422      	add	r2, r4
 800504a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800504e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005052:	3302      	adds	r3, #2
 8005054:	e7c5      	b.n	8004fe2 <_printf_common+0x62>
 8005056:	2301      	movs	r3, #1
 8005058:	4622      	mov	r2, r4
 800505a:	4639      	mov	r1, r7
 800505c:	4630      	mov	r0, r6
 800505e:	47c0      	blx	r8
 8005060:	3001      	adds	r0, #1
 8005062:	d0e6      	beq.n	8005032 <_printf_common+0xb2>
 8005064:	f109 0901 	add.w	r9, r9, #1
 8005068:	e7d8      	b.n	800501c <_printf_common+0x9c>
	...

0800506c <_printf_i>:
 800506c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005070:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005074:	460c      	mov	r4, r1
 8005076:	7e09      	ldrb	r1, [r1, #24]
 8005078:	b085      	sub	sp, #20
 800507a:	296e      	cmp	r1, #110	; 0x6e
 800507c:	4617      	mov	r7, r2
 800507e:	4606      	mov	r6, r0
 8005080:	4698      	mov	r8, r3
 8005082:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005084:	f000 80b3 	beq.w	80051ee <_printf_i+0x182>
 8005088:	d822      	bhi.n	80050d0 <_printf_i+0x64>
 800508a:	2963      	cmp	r1, #99	; 0x63
 800508c:	d036      	beq.n	80050fc <_printf_i+0x90>
 800508e:	d80a      	bhi.n	80050a6 <_printf_i+0x3a>
 8005090:	2900      	cmp	r1, #0
 8005092:	f000 80b9 	beq.w	8005208 <_printf_i+0x19c>
 8005096:	2958      	cmp	r1, #88	; 0x58
 8005098:	f000 8083 	beq.w	80051a2 <_printf_i+0x136>
 800509c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80050a4:	e032      	b.n	800510c <_printf_i+0xa0>
 80050a6:	2964      	cmp	r1, #100	; 0x64
 80050a8:	d001      	beq.n	80050ae <_printf_i+0x42>
 80050aa:	2969      	cmp	r1, #105	; 0x69
 80050ac:	d1f6      	bne.n	800509c <_printf_i+0x30>
 80050ae:	6820      	ldr	r0, [r4, #0]
 80050b0:	6813      	ldr	r3, [r2, #0]
 80050b2:	0605      	lsls	r5, r0, #24
 80050b4:	f103 0104 	add.w	r1, r3, #4
 80050b8:	d52a      	bpl.n	8005110 <_printf_i+0xa4>
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6011      	str	r1, [r2, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	da03      	bge.n	80050ca <_printf_i+0x5e>
 80050c2:	222d      	movs	r2, #45	; 0x2d
 80050c4:	425b      	negs	r3, r3
 80050c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80050ca:	486f      	ldr	r0, [pc, #444]	; (8005288 <_printf_i+0x21c>)
 80050cc:	220a      	movs	r2, #10
 80050ce:	e039      	b.n	8005144 <_printf_i+0xd8>
 80050d0:	2973      	cmp	r1, #115	; 0x73
 80050d2:	f000 809d 	beq.w	8005210 <_printf_i+0x1a4>
 80050d6:	d808      	bhi.n	80050ea <_printf_i+0x7e>
 80050d8:	296f      	cmp	r1, #111	; 0x6f
 80050da:	d020      	beq.n	800511e <_printf_i+0xb2>
 80050dc:	2970      	cmp	r1, #112	; 0x70
 80050de:	d1dd      	bne.n	800509c <_printf_i+0x30>
 80050e0:	6823      	ldr	r3, [r4, #0]
 80050e2:	f043 0320 	orr.w	r3, r3, #32
 80050e6:	6023      	str	r3, [r4, #0]
 80050e8:	e003      	b.n	80050f2 <_printf_i+0x86>
 80050ea:	2975      	cmp	r1, #117	; 0x75
 80050ec:	d017      	beq.n	800511e <_printf_i+0xb2>
 80050ee:	2978      	cmp	r1, #120	; 0x78
 80050f0:	d1d4      	bne.n	800509c <_printf_i+0x30>
 80050f2:	2378      	movs	r3, #120	; 0x78
 80050f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80050f8:	4864      	ldr	r0, [pc, #400]	; (800528c <_printf_i+0x220>)
 80050fa:	e055      	b.n	80051a8 <_printf_i+0x13c>
 80050fc:	6813      	ldr	r3, [r2, #0]
 80050fe:	1d19      	adds	r1, r3, #4
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	6011      	str	r1, [r2, #0]
 8005104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800510c:	2301      	movs	r3, #1
 800510e:	e08c      	b.n	800522a <_printf_i+0x1be>
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	6011      	str	r1, [r2, #0]
 8005114:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005118:	bf18      	it	ne
 800511a:	b21b      	sxthne	r3, r3
 800511c:	e7cf      	b.n	80050be <_printf_i+0x52>
 800511e:	6813      	ldr	r3, [r2, #0]
 8005120:	6825      	ldr	r5, [r4, #0]
 8005122:	1d18      	adds	r0, r3, #4
 8005124:	6010      	str	r0, [r2, #0]
 8005126:	0628      	lsls	r0, r5, #24
 8005128:	d501      	bpl.n	800512e <_printf_i+0xc2>
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	e002      	b.n	8005134 <_printf_i+0xc8>
 800512e:	0668      	lsls	r0, r5, #25
 8005130:	d5fb      	bpl.n	800512a <_printf_i+0xbe>
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	4854      	ldr	r0, [pc, #336]	; (8005288 <_printf_i+0x21c>)
 8005136:	296f      	cmp	r1, #111	; 0x6f
 8005138:	bf14      	ite	ne
 800513a:	220a      	movne	r2, #10
 800513c:	2208      	moveq	r2, #8
 800513e:	2100      	movs	r1, #0
 8005140:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005144:	6865      	ldr	r5, [r4, #4]
 8005146:	60a5      	str	r5, [r4, #8]
 8005148:	2d00      	cmp	r5, #0
 800514a:	f2c0 8095 	blt.w	8005278 <_printf_i+0x20c>
 800514e:	6821      	ldr	r1, [r4, #0]
 8005150:	f021 0104 	bic.w	r1, r1, #4
 8005154:	6021      	str	r1, [r4, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d13d      	bne.n	80051d6 <_printf_i+0x16a>
 800515a:	2d00      	cmp	r5, #0
 800515c:	f040 808e 	bne.w	800527c <_printf_i+0x210>
 8005160:	4665      	mov	r5, ip
 8005162:	2a08      	cmp	r2, #8
 8005164:	d10b      	bne.n	800517e <_printf_i+0x112>
 8005166:	6823      	ldr	r3, [r4, #0]
 8005168:	07db      	lsls	r3, r3, #31
 800516a:	d508      	bpl.n	800517e <_printf_i+0x112>
 800516c:	6923      	ldr	r3, [r4, #16]
 800516e:	6862      	ldr	r2, [r4, #4]
 8005170:	429a      	cmp	r2, r3
 8005172:	bfde      	ittt	le
 8005174:	2330      	movle	r3, #48	; 0x30
 8005176:	f805 3c01 	strble.w	r3, [r5, #-1]
 800517a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800517e:	ebac 0305 	sub.w	r3, ip, r5
 8005182:	6123      	str	r3, [r4, #16]
 8005184:	f8cd 8000 	str.w	r8, [sp]
 8005188:	463b      	mov	r3, r7
 800518a:	aa03      	add	r2, sp, #12
 800518c:	4621      	mov	r1, r4
 800518e:	4630      	mov	r0, r6
 8005190:	f7ff fef6 	bl	8004f80 <_printf_common>
 8005194:	3001      	adds	r0, #1
 8005196:	d14d      	bne.n	8005234 <_printf_i+0x1c8>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800519c:	b005      	add	sp, #20
 800519e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80051a2:	4839      	ldr	r0, [pc, #228]	; (8005288 <_printf_i+0x21c>)
 80051a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80051a8:	6813      	ldr	r3, [r2, #0]
 80051aa:	6821      	ldr	r1, [r4, #0]
 80051ac:	1d1d      	adds	r5, r3, #4
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6015      	str	r5, [r2, #0]
 80051b2:	060a      	lsls	r2, r1, #24
 80051b4:	d50b      	bpl.n	80051ce <_printf_i+0x162>
 80051b6:	07ca      	lsls	r2, r1, #31
 80051b8:	bf44      	itt	mi
 80051ba:	f041 0120 	orrmi.w	r1, r1, #32
 80051be:	6021      	strmi	r1, [r4, #0]
 80051c0:	b91b      	cbnz	r3, 80051ca <_printf_i+0x15e>
 80051c2:	6822      	ldr	r2, [r4, #0]
 80051c4:	f022 0220 	bic.w	r2, r2, #32
 80051c8:	6022      	str	r2, [r4, #0]
 80051ca:	2210      	movs	r2, #16
 80051cc:	e7b7      	b.n	800513e <_printf_i+0xd2>
 80051ce:	064d      	lsls	r5, r1, #25
 80051d0:	bf48      	it	mi
 80051d2:	b29b      	uxthmi	r3, r3
 80051d4:	e7ef      	b.n	80051b6 <_printf_i+0x14a>
 80051d6:	4665      	mov	r5, ip
 80051d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80051dc:	fb02 3311 	mls	r3, r2, r1, r3
 80051e0:	5cc3      	ldrb	r3, [r0, r3]
 80051e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80051e6:	460b      	mov	r3, r1
 80051e8:	2900      	cmp	r1, #0
 80051ea:	d1f5      	bne.n	80051d8 <_printf_i+0x16c>
 80051ec:	e7b9      	b.n	8005162 <_printf_i+0xf6>
 80051ee:	6813      	ldr	r3, [r2, #0]
 80051f0:	6825      	ldr	r5, [r4, #0]
 80051f2:	6961      	ldr	r1, [r4, #20]
 80051f4:	1d18      	adds	r0, r3, #4
 80051f6:	6010      	str	r0, [r2, #0]
 80051f8:	0628      	lsls	r0, r5, #24
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	d501      	bpl.n	8005202 <_printf_i+0x196>
 80051fe:	6019      	str	r1, [r3, #0]
 8005200:	e002      	b.n	8005208 <_printf_i+0x19c>
 8005202:	066a      	lsls	r2, r5, #25
 8005204:	d5fb      	bpl.n	80051fe <_printf_i+0x192>
 8005206:	8019      	strh	r1, [r3, #0]
 8005208:	2300      	movs	r3, #0
 800520a:	6123      	str	r3, [r4, #16]
 800520c:	4665      	mov	r5, ip
 800520e:	e7b9      	b.n	8005184 <_printf_i+0x118>
 8005210:	6813      	ldr	r3, [r2, #0]
 8005212:	1d19      	adds	r1, r3, #4
 8005214:	6011      	str	r1, [r2, #0]
 8005216:	681d      	ldr	r5, [r3, #0]
 8005218:	6862      	ldr	r2, [r4, #4]
 800521a:	2100      	movs	r1, #0
 800521c:	4628      	mov	r0, r5
 800521e:	f7fa ffff 	bl	8000220 <memchr>
 8005222:	b108      	cbz	r0, 8005228 <_printf_i+0x1bc>
 8005224:	1b40      	subs	r0, r0, r5
 8005226:	6060      	str	r0, [r4, #4]
 8005228:	6863      	ldr	r3, [r4, #4]
 800522a:	6123      	str	r3, [r4, #16]
 800522c:	2300      	movs	r3, #0
 800522e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005232:	e7a7      	b.n	8005184 <_printf_i+0x118>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	462a      	mov	r2, r5
 8005238:	4639      	mov	r1, r7
 800523a:	4630      	mov	r0, r6
 800523c:	47c0      	blx	r8
 800523e:	3001      	adds	r0, #1
 8005240:	d0aa      	beq.n	8005198 <_printf_i+0x12c>
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	079b      	lsls	r3, r3, #30
 8005246:	d413      	bmi.n	8005270 <_printf_i+0x204>
 8005248:	68e0      	ldr	r0, [r4, #12]
 800524a:	9b03      	ldr	r3, [sp, #12]
 800524c:	4298      	cmp	r0, r3
 800524e:	bfb8      	it	lt
 8005250:	4618      	movlt	r0, r3
 8005252:	e7a3      	b.n	800519c <_printf_i+0x130>
 8005254:	2301      	movs	r3, #1
 8005256:	464a      	mov	r2, r9
 8005258:	4639      	mov	r1, r7
 800525a:	4630      	mov	r0, r6
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d09a      	beq.n	8005198 <_printf_i+0x12c>
 8005262:	3501      	adds	r5, #1
 8005264:	68e3      	ldr	r3, [r4, #12]
 8005266:	9a03      	ldr	r2, [sp, #12]
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	42ab      	cmp	r3, r5
 800526c:	dcf2      	bgt.n	8005254 <_printf_i+0x1e8>
 800526e:	e7eb      	b.n	8005248 <_printf_i+0x1dc>
 8005270:	2500      	movs	r5, #0
 8005272:	f104 0919 	add.w	r9, r4, #25
 8005276:	e7f5      	b.n	8005264 <_printf_i+0x1f8>
 8005278:	2b00      	cmp	r3, #0
 800527a:	d1ac      	bne.n	80051d6 <_printf_i+0x16a>
 800527c:	7803      	ldrb	r3, [r0, #0]
 800527e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005282:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005286:	e76c      	b.n	8005162 <_printf_i+0xf6>
 8005288:	08005399 	.word	0x08005399
 800528c:	080053aa 	.word	0x080053aa

08005290 <memcpy>:
 8005290:	b510      	push	{r4, lr}
 8005292:	1e43      	subs	r3, r0, #1
 8005294:	440a      	add	r2, r1
 8005296:	4291      	cmp	r1, r2
 8005298:	d100      	bne.n	800529c <memcpy+0xc>
 800529a:	bd10      	pop	{r4, pc}
 800529c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80052a4:	e7f7      	b.n	8005296 <memcpy+0x6>

080052a6 <memmove>:
 80052a6:	4288      	cmp	r0, r1
 80052a8:	b510      	push	{r4, lr}
 80052aa:	eb01 0302 	add.w	r3, r1, r2
 80052ae:	d807      	bhi.n	80052c0 <memmove+0x1a>
 80052b0:	1e42      	subs	r2, r0, #1
 80052b2:	4299      	cmp	r1, r3
 80052b4:	d00a      	beq.n	80052cc <memmove+0x26>
 80052b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80052ba:	f802 4f01 	strb.w	r4, [r2, #1]!
 80052be:	e7f8      	b.n	80052b2 <memmove+0xc>
 80052c0:	4283      	cmp	r3, r0
 80052c2:	d9f5      	bls.n	80052b0 <memmove+0xa>
 80052c4:	1881      	adds	r1, r0, r2
 80052c6:	1ad2      	subs	r2, r2, r3
 80052c8:	42d3      	cmn	r3, r2
 80052ca:	d100      	bne.n	80052ce <memmove+0x28>
 80052cc:	bd10      	pop	{r4, pc}
 80052ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80052d2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80052d6:	e7f7      	b.n	80052c8 <memmove+0x22>

080052d8 <_realloc_r>:
 80052d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052da:	4607      	mov	r7, r0
 80052dc:	4614      	mov	r4, r2
 80052de:	460e      	mov	r6, r1
 80052e0:	b921      	cbnz	r1, 80052ec <_realloc_r+0x14>
 80052e2:	4611      	mov	r1, r2
 80052e4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80052e8:	f7ff bc54 	b.w	8004b94 <_malloc_r>
 80052ec:	b922      	cbnz	r2, 80052f8 <_realloc_r+0x20>
 80052ee:	f7ff fc03 	bl	8004af8 <_free_r>
 80052f2:	4625      	mov	r5, r4
 80052f4:	4628      	mov	r0, r5
 80052f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052f8:	f000 f814 	bl	8005324 <_malloc_usable_size_r>
 80052fc:	42a0      	cmp	r0, r4
 80052fe:	d20f      	bcs.n	8005320 <_realloc_r+0x48>
 8005300:	4621      	mov	r1, r4
 8005302:	4638      	mov	r0, r7
 8005304:	f7ff fc46 	bl	8004b94 <_malloc_r>
 8005308:	4605      	mov	r5, r0
 800530a:	2800      	cmp	r0, #0
 800530c:	d0f2      	beq.n	80052f4 <_realloc_r+0x1c>
 800530e:	4631      	mov	r1, r6
 8005310:	4622      	mov	r2, r4
 8005312:	f7ff ffbd 	bl	8005290 <memcpy>
 8005316:	4631      	mov	r1, r6
 8005318:	4638      	mov	r0, r7
 800531a:	f7ff fbed 	bl	8004af8 <_free_r>
 800531e:	e7e9      	b.n	80052f4 <_realloc_r+0x1c>
 8005320:	4635      	mov	r5, r6
 8005322:	e7e7      	b.n	80052f4 <_realloc_r+0x1c>

08005324 <_malloc_usable_size_r>:
 8005324:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005328:	1f18      	subs	r0, r3, #4
 800532a:	2b00      	cmp	r3, #0
 800532c:	bfbc      	itt	lt
 800532e:	580b      	ldrlt	r3, [r1, r0]
 8005330:	18c0      	addlt	r0, r0, r3
 8005332:	4770      	bx	lr

08005334 <_init>:
 8005334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005336:	bf00      	nop
 8005338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800533a:	bc08      	pop	{r3}
 800533c:	469e      	mov	lr, r3
 800533e:	4770      	bx	lr

08005340 <_fini>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	bf00      	nop
 8005344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005346:	bc08      	pop	{r3}
 8005348:	469e      	mov	lr, r3
 800534a:	4770      	bx	lr
